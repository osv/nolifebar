#!/usr/bin/env bash

# set -x

# Exit immediately if a command exits with a non-zero status,
# Make pipelines fail if any command fails
set -eo pipefail

# Check if the resource file path is provided
if [ -z "$1" ]; then
    echo "Usage: $0 path_to_config_file"
    exit 1
fi

SCRIPT_DIR="$(dirname "$(realpath "$0")")"
# Add the script directory to the PATH
export PATH="$SCRIPT_DIR:$PATH"

# Get the absolute path of the resource file
RESOURCE_FILE=$(realpath "$1")
export RESOURCE_FILE
TMP_DIR=/tmp/nolifebar--$(basename "$RESOURCE_FILE")
mkdir -p "$TMP_DIR"
export TMP_DIR
template_fifo="$TMP_DIR/template.fifo"

# Get the directory of the resource file
RESOURCE_DIR=$(dirname "$RESOURCE_FILE")

# Get the directory of the main script
MODULE_CORE_DIR=$(realpath $(dirname "$(realpath "$0")")/../lib/nolifebar)
export MODULE_CORE_DIR
source "$MODULE_CORE_DIR/functions"

# Load the resource file
source "$RESOURCE_FILE"

if ! declare -F MAIN_format_template > /dev/null; then
    echo "Function MAIN_format_template is not declared"
    exit 1
fi

declare -a PIDS=()

declare -A program_colors
color_index=0

declare -a fifo_files

# Define a list of color codes
colors=("32" "33" "34" "35" "36" "92" "93" "94" "95" "96")
# Function to get or assign a color for a program
get_color() {
    local program_name="$1"
    local result="$2"
    if [[ -z "${program_colors[$program_name]}" ]]; then
        program_colors[$program_name]=${colors[$color_index]}
        color_index=$(( (color_index + 1) % ${#colors[@]} ))
    fi
    printf -v "$result" -- "${program_colors[$program_name]}"
}

# Function to format the output
format_output() {
    local prefix="$1"
    local suffix="$2"
    local color_code="$3"
    while read -r line; do
        if [ "$suffix" == "ERROR" ]; then
            printf "\033[%sm%-16s|\033[31m%s| %s\033[0m\n" "${color_code}" "$prefix" "$suffix" "$line"
        else
            printf "\033[%sm%-16s|%s| %s\033[0m\n" "${color_code}" "$prefix" "$suffix" "$line"
        fi
    done
}

log_info() {
  local line="$1"
  printf "\e[1m%s\033[0m\n" "$line"
}

log_error() {
  local line="$1"
  printf "\033[31m%s\033[0m\n" "$line" >&2
}

# Function to run a command and prepend its output with the program name
run_with_output_prefix() {
    local color_code="$1"
    shift
    local program_name="$1"
    shift
    local prefix="${program_name}"
    "$@" 2> >(format_output "$prefix" "ERROR" "$color_code" >&2) | format_output "$prefix" "INFO " "$color_code"
    return "${PIPESTATUS[0]}"
}

# Function to clean up all child processes and temporary files
cleanup_on_exit() {
    log_info "Exiting..."

    # prevent recursive trap
    trap - EXIT INT TERM
    # Terminate all background processes stored in PIDS
    for pid in "${PIDS[@]}"; do
      if kill -0 "$pid" 2>/dev/null; then
        kill -15 "$pid" 2>/dev/null || true  # Graceful termination
      fi
    done

    # Optionally wait and force kill if necessary
    for pid in "${PIDS[@]}"; do
      if kill -0 "$pid" 2>/dev/null; then
        sleep 1
        kill -9 "$pid" 2>/dev/null || true  # Forceful termination
      fi
    done

    # Remove temporary files and FIFOs
    rm -f "$TMP_DIR"/out_*
    rm -f "$template_fifo"

    kill -- -$$ 2>/dev/null || echo "No processes to kill."
}

load_module() {
    local module="$1"
    local module_file="mod_${module}"

    # Determine the module path
    if [ -f "$RESOURCE_DIR/$module_file" ]; then
        module_path="$RESOURCE_DIR/$module_file"
    elif [ -f "$MODULE_CORE_DIR/$module_file" ]; then
        module_path="$MODULE_CORE_DIR/$module_file"
    else
        log_error "Module $module_file not found in either $RESOURCE_DIR or $MODULE_CORE_DIR"
        exit 1
    fi

    local module_color
    get_color "$module" module_color

    local FIFO_FILE="${TMP_DIR}/out_${module}"
    mkfifo "$FIFO_FILE"
    fifo_files+=("$FIFO_FILE")
    export FIFO_FILE
    MOD_NAME="mod_$module"
    export MOD_NAME="${MOD_NAME^^}" # ^^ - upper case
    run_with_output_prefix "$module_color" "mod_$module" "$module_path" "" &
    PIDS+=($!)
}

load_modules() {
    local modules=("$@")
    for module in "${modules[@]}"; do
        load_module "$module"
    done
}

# Function to process input and print FPS if env var DEBUG_FPS=true
debug_pipe_or_print_fps() {
  local count=0

  highlight_backend_commands() {
    if [ "$CFG_BACKEND" = "dzen2" ]; then
      sed -E "
        s/\^(r|ro|c|co)\(([^)]*)\)/${BOLD_YELLOW}^\1(${RESET}${INTENSE_YELLOW}\2${RESET}${BOLD_YELLOW})${RESET}/g;
        s/\^(p|pa|ba)\(([^)]*)\)/${BOLD_CYAN}^\1(${RESET}${INTENSE_CYAN}\2${RESET}${BOLD_CYAN})${RESET}/g;
        s/\^(ib|i|fg|bg|fn)\(([^)]*)\)/${BOLD_MAGENTA}^\1(${RESET}${GREEN}\2${RESET}${BOLD_MAGENTA})${RESET}/g;
        s/\^ca\(([^)]*)\)/${BOLD_RED}^ca(${RESET}${UNDERLINE_RED}\1${RESET}${BOLD_RED})${RESET}/g
    "
    else
      # TODO: Other backends, xmobar, lemonbar
      cat
    fi
  }

  if [ "$DEBUG" = true ]; then
      tee >(cat | highlight_backend_commands >&2)
      return
  fi

  if [ "$DEBUG_FPS" != true ]; then
      cat
      return
  fi

  timestamp() {
      local -n result="$1"
      local epoch="${EPOCHREALTIME}"
      result="${epoch/./}"
  }

  local start_time
  timestamp start_time
  local last_print_time="$start_time"
  while IFS= read -r line; do
    printf "%s\n" "$line"
    count=$((count + 1))

    local current_time
    timestamp current_time
    local elapsed_time=$((current_time - last_print_time))

    if ((elapsed_time >= 5000000)); then
      local fps=$(((count * 1000)/ ((elapsed_time) / 1000)))
      printf "FPS: %s\n" "$fps" >&2
      count=0
      last_print_time=$current_time
    fi
  done
}

format_nolifebar_template() {
    local latest_output="$1"
    MAIN_format_template "$latest_output" > "$template_fifo"

}

process_nolifebar_output() {
    while IFS= read -r line; do
        format_nolifebar_template "$line"
    done
}

run_and_wait_for_nolifebar() {
    mkfifo "$template_fifo"

    build_replace_file

    nolifebar-multiplexer "$template_fifo" "${fifo_files[@]}" \
      | nolifebar-replacer "$CFG_REPLACER_FILE" \
      | debug_pipe_or_print_fps \
      | "${CFG_STATUS_BAR_CMD[@]}" \
      | process_nolifebar_output &
    local pid=$!
    PIDS+=("$pid")

    format_nolifebar_template

    wait "$pid"
}

log_info "SCRIPT_DIR:      $SCRIPT_DIR"
log_info "MODULE_CORE_DIR: $MODULE_CORE_DIR"

trap cleanup_on_exit EXIT INT TERM

load_modules "${CFG_MODULES[@]}"

run_and_wait_for_nolifebar
