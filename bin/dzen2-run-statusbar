#!/usr/bin/env bash

# set -x

# Check if the resource file path is provided
if [ -z "$1" ]; then
    echo "Usage: $0 path_to_config_file"
    exit 1
fi

SCRIPT_DIR="$(dirname "$(realpath "$0")")"
# Add the script directory to the PATH
export PATH="$SCRIPT_DIR:$PATH"

# Get the absolute path of the resource file
RESOURCE_FILE=$(realpath "$1")
export RESOURCE_FILE
TMP_DIR=/tmp/dzen2rs-$(basename "$RESOURCE_FILE")
mkdir -p "$TMP_DIR"
export TMP_DIR
template_fifo="$TMP_DIR/template.fifo"

# Get the directory of the resource file
RESOURCE_DIR=$(dirname "$RESOURCE_FILE")

# Get the directory of the main script
MODULE_CORE_DIR=$(realpath $(dirname "$(realpath "$0")")/../lib/dzen2-status-bar)
export MODULE_CORE_DIR
source "$MODULE_CORE_DIR/functions"

# Load the resource file
source "$RESOURCE_FILE"

if ! declare -F fn_format_template > /dev/null; then
    echo "Function fn_format_template is not declared"
    exit 1
fi


declare -A program_colors
color_index=0

declare -a fifo_files

# Define a list of color codes
colors=("32" "33" "34" "35" "36")
# Function to get or assign a color for a program
get_color() {
    local program_name="$1"
    local result="$2"
    if [[ -z "${program_colors[$program_name]}" ]]; then
        program_colors[$program_name]=${colors[$color_index]}
        color_index=$(( (color_index + 1) % ${#colors[@]} ))
    fi
    printf -v "$result" -- "${program_colors[$program_name]}"
}

# Function to format the output
format_output() {
    local prefix="$1"
    local suffix="$2"
    while read -r line; do
        if [ "$suffix" == "ERROR" ]; then
            printf "\033[%sm%-16s|\033[31m%s| %s\033[0m\n" "${color_code}" "$prefix" "$suffix" "$line"
        else
            printf "\033[%sm%-16s|%s| %s\033[0m\n" "${color_code}" "$prefix" "$suffix" "$line"
        fi
    done
}

# Function to run a command and prepend its output with the program name
run_with_output_prefix() {
    local color_code="$1"
    shift
    local program_name="$1"
    shift
    local prefix="${program_name}"
    {
        $@ 2> >(format_output "$prefix" "ERROR" >&2)
    } | format_output "$prefix" "INFO "
}

cleanup_on_exit() {
    printf "\nExiting..."
    set -x
    jobs -p | xargs -r kill 2>/dev/null
    rm "$TMP_DIR"/out_*
    rm "$template_fifo"
}

load_module() {
    local module="$1"
    local module_file="mod_${module}"

    # Determine the module path
    if [ -f "$RESOURCE_DIR/$module_file" ]; then
        module_path="$RESOURCE_DIR/$module_file"
    elif [ -f "$MODULE_CORE_DIR/$module_file" ]; then
        module_path="$MODULE_CORE_DIR/$module_file"
    else
        echo "Module $module_file not found in either $RESOURCE_DIR or $MODULE_CORE_DIR"
        exit 1
    fi

    local module_color
    get_color "$module" module_color

    local FIFO_FILE="${TMP_DIR}/out_${module}"
    mkfifo "$FIFO_FILE"
    fifo_files+=("$FIFO_FILE")
    export FIFO_FILE
    MOD_NAME="mod_$module"
    export MOD_NAME="${MOD_NAME^^}" # ^^ - upper case
    run_with_output_prefix "$module_color" "mod_$module" "$module_path" "" &
}

load_modules() {
    local modules=("$@")
    for module in "${modules[@]}"; do
        load_module "$module"
    done
}

debug_pipe() {
    if [ "$DEBUG" = true ]; then
        tee >(cat >&2)
    else
        cat
    fi
}

format_dzen2_template() {
    local latest_output="$1"
    fn_format_template "$latest_output" > "$template_fifo"

}

process_dzen2_output() {
    while IFS= read -r line; do
        format_dzen2_template "$line"
    done
}

run_and_wait_for_dzen2() {
    # echo "$template_fifo $(IFS=' '; echo "${fifo_files[*]}")"
    mkfifo "$template_fifo"

    dzen2-merge-pipes "$template_fifo" $(IFS=' '; echo "${fifo_files[*]}") |\
        sed --unbuffered "$SED_COMMAND" |\
        debug_pipe |\
        "${CFG_STATUS_BAR_CMD[@]}" |\
        process_dzen2_output &
    pid=$!

    format_dzen2_template

    wait $pid
}

trap cleanup_on_exit EXIT

load_modules "${CFG_MODULES[@]}"
SED_COMMAND=$(build_sed_replace_command)
run_and_wait_for_dzen2
