#!/usr/bin/env bash

printf "Executing Nvidia GPU Stats Plugin\n"

: "${MODULE_CORE_DIR:=$(dirname $0)}"
. "$MODULE_CORE_DIR/functions"
[ -f "$RESOURCE_FILE" ] && source "$RESOURCE_FILE"

: "${TMP_DIR:=/tmp}"

check_dependencies nvidia-smi

declare -A gpu_metrics_alert_treshold
declare -A gpu_metrics_fmt
declare -A alerts=() # dictionary of ON/OFF value if value > treshold in gpu_metrics_alert_treshold
declare -A gpu_metrics_value=() # Raw metric values
declare -A gpu_metrics_formatted=() # Formatted metrics

mod_init_vars() {
    interval=1
    gpu_index=0

    additional_render_params=()

    gpu_metrics_alert_treshold=(
        ["fan.speed"]=10        # I want to know when fan is on
        ["power.draw"]=30       # power draw is importent for me
        ["utilization.gpu"]=70
        ["temperature.gpu"]=70
        ["utilization.decoder"]=1
        ["utilization.encoder"]=1
        ["clocks.current.graphics"]=1000
        ["clocks.current.memory"]=1000
    )

    dzen2_show_short_metric=1 # use visible_metrics_short by default? RMB - toggle

    visible_metrics_short=('power.draw' 'utilization.gpu'
                           'utilization.decoder' 'utilization.encoder'
                          )

    visible_metrics_long=('memory.free' 'memory.used'
                          'fan.speed' 'temperature.gpu'
                          'power.draw' 'utilization.gpu'
                          'clocks.current.memory' 'clocks.current.graphics'
                          'utilization.decoder' 'utilization.encoder'
                         )

    # define how to format metrics
    gpu_metrics_fmt=(
        ["name"]="%s"
        ["fan.speed"]="Fan %3i%%"
        ["power.draw"]="Pwr%4iW"
        ["memory.total"]="Ttl %4sM"
        ["memory.free"]="Fre %4sM"
        ["memory.used"]="Use %4sM"
        ["utilization.gpu"]="GPU %3i%%"
        ["temperature.gpu"]="t  %4iÂ°C"
        ["utilization.decoder"]="Dec %3i%%"
        ["utilization.encoder"]="Enc %3i%%"
        ["clocks.current.graphics"]="P%5iMHz"
        ["clocks.current.memory"]="M%5iMHz"
    )

    popup_delay=4               # delay before hide popup
    popup_line_height=14
    popup_line_width=$((CFG_POPUP_LINE_HEIGHT * 26))
    popup_rows=25
}

dzen2_show_popup() {
    local width="$popup_line_width"
    local rows="$popup_rows"

    kill_process() {
        local PID=$1
        if [[ -n "$PID" ]]; then
            if kill -9 "$PID"; then
                notify-send "Process $PID killed"
            else
                notify-send "Failed to kill $PID"
            fi
        fi
    }

    local x y
    x11_get_good_tooltip_position x y "$width" $((popup_line_height * (1+rows)))

    # Start dzen2 as a coprocess without subshells
    coproc DZEN2_PROC {
        "${CFG_DZEN2_POPUP_CMD[@]}" \
            -x "$x" -y "$y" -w "$width" -h "$popup_line_height" \
            -l "$rows" -p "$popup_delay" \
            -sa 'c' -ta 'c' \
            -e 'onstart=uncollapse;button1=exec:print REFRESH;button3=exit'
    }
    # Assign the coprocess file descriptors to variables
    exec {DZEN_IN}>&"${DZEN2_PROC[1]}"
    exec {DZEN_OUT}<&"${DZEN2_PROC[0]}"

    # Ensure the coprocess started successfully
    if [[ -z "${DZEN2_PROC_PID}" ]]; then
        echo "Failed to start dzen2 coprocess"
        return 1
    fi

    # Function to generate and send the process list to dzen2
    send_process_list() {
        {
            printf "^cs()\n"
            nvidia-smi | sed -E 's/([|+=-]+)/^fg(<POPUP_BAR3>)\1^fg()/g'
        } | nolifebar-replacer "$CFG_REPLACER_FILE" >&$DZEN_IN
    }

    # Send initial settings and process list to dzen2
    {
        cat <<EOS
^normfg(<POPUP_FG>)
^normbg(<POPUP_BG>)
^normfn(<POPUP_FN_SMALL>)
^tw()^fn(<POPUP_FN_BIG>)Nvidia GPU (click - refresh)
^cs
EOS
    } | nolifebar-replacer "$CFG_REPLACER_FILE" >&$DZEN_IN
    send_process_list

    while true; do
        # Wait for a command from dzen2
        if read -r command <&$DZEN_OUT; then
            case "$command" in
                KILL\ *)
                    # Extract PID and kill the process
                    PID=${command#KILL }
                    kill_process "$PID"
                    send_process_list
                    ;;
                REFRESH)
                    send_process_list
                    ;;
                *)
                    echo "Unknown command: $command"
                    ;;
            esac
        else
            # dzen2 has closed or an error occurred
            break
        fi
    done

    # Close file descriptors and wait for the coprocess to exit
    exec {DZEN_IN}>&-
    exec {DZEN_OUT}<&-
    wait "${DZEN2_PROC_PID}"
}

mod_nvidia_draw_flags() {
    local -n _result="$1"
    local _selected_metrics
    if (( dzen2_show_short_metric == 1 )); then
        _selected_metrics=visible_metrics_short
    else
        _selected_metrics=visible_metrics_long
    fi
    dzen2_draw_flags _result \
        gpu_metrics_formatted \
        alerts \
        "${_selected_metrics}" \
        -label "GPU" \
        "${CFG_DEFAULT_DRAW_FLAG_PARAMS[@]}" \
        -name_size 60 \
        -flag_align _LEFT \
        -flag_x_padding 3 \
        "${additional_render_params[@]}"
}

# First arg - fifo file for output
mod_draw_dzen2() {
    local output=""
    mod_nvidia_draw_flags output
    printf "^ca(1, kill -SIGUSR1 $$)^ca(3, kill -SIGUSR2 $$)%s^ca()^ca()\n" "$output"
}

dzen2_toggle_short_metric() {
    dzen2_show_short_metric=$((dzen2_show_short_metric ? 0 : 1))
    printf "Signal received: dzen2_show_short_metric=%s\n" "$dzen2_show_short_metric"
    update &
}

trap dzen2_toggle_short_metric SIGUSR1
trap 'dzen2_show_popup&' SIGUSR2

update() {
    mod_draw > "$FIFO_FILE"
}

mod_loop() {
    # blank state
    update

    while IFS=, read -r index name fan_speed power_draw memory_total \
        memory_free memory_used gpu_utilization temperature \
        decoder encoder clocks_graphics clocks_memory
    do
        if ((index != gpu_index)); then continue; fi
        power_draw="${power_draw%%.*}" # to integer: 24.15 -> 24

        gpu_metrics_value["name"]="$name"
        gpu_metrics_value["fan.speed"]="$fan_speed"
        gpu_metrics_value["power.draw"]="$power_draw"
        gpu_metrics_value["memory.total"]="$memory_total"
        gpu_metrics_value["memory.free"]="$memory_free"
        gpu_metrics_value["memory.used"]="$memory_used"
        gpu_metrics_value["utilization.gpu"]="$gpu_utilization"
        gpu_metrics_value["temperature.gpu"]="$temperature"
        gpu_metrics_value["utilization.decoder"]="$decoder"
        gpu_metrics_value["utilization.encoder"]="$encoder"
        gpu_metrics_value["clocks.current.graphics"]="$clocks_graphics"
        gpu_metrics_value["clocks.current.memory"]="$clocks_memory"

        apply_dictionary_value_format gpu_metrics_formatted gpu_metrics_value gpu_metrics_fmt
        update_threshold alerts gpu_metrics_value gpu_metrics_alert_treshold
        update
    done < <(nvidia-smi -l "$interval" \
        --query-gpu=index,name,fan.speed,power.draw,memory.total,memory.free,memory.used,utilization.gpu,temperature.gpu,utilization.decoder,utilization.encoder,clocks.current.graphics,clocks.current.memory \
        --format=csv,noheader,nounits \
        | sed --unbuffered 's/, /,/g')
}

mod_run
