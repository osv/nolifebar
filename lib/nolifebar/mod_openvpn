#!/usr/bin/env bash

echo "Executing OpenVPN Plugin"

[ -f "$RESOURCE_FILE" ] && source "$RESOURCE_FILE"
: "${MODULE_CORE_DIR:=$(dirname $0)}"
. "$MODULE_CORE_DIR/functions"
: "${TMP_DIR:=/tmp}"

check_dependencies systemctl journalctl

declare -A services_name_map
# Dictionary for service status: ON/OFF value, for using in draw fn
declare -A services_status

mod_init_vars() {
    service_prefix="openvpn-" # systemd openvpn prefix
    services=() # openvpn systemd services
    services_name_map=()
    additional_render_params=() # dzen2_draw_flags
}

# First arg - fifo file for output
# Second arg - last line from log
mod_draw_default() {
    local fifo="$1"
    local last_line="$2" # not used

    local result=""
    for service in "${services[@]}"; do
        service_name="${services_name_map[$service]:-$service}"
        service_status="${services_status[$service]}"
        result+=" $service_name: $service_status"
    done

    printf "VPN: [%s]\n" "$result" > $fifo
}

mod_draw_dzen2() {
    local fifo="$1"
    local last_line="$2" # not used

    # kill previous
    if [[ -n "$draw_pid" ]]; then
      kill "$draw_pid" 2>/dev/null
      wait "$draw_pid" 2>/dev/null
    fi

    dzen2_draw_and_blink "$fifo" &
    draw_pid=$!
}

dzen2_draw_and_blink() {
    local fifo="$1"

    local i=5
    while ((i)); do
        local out
        dzen2_draw_flags out \
            services_name_map \
            services_status \
            services \
            -label "VPN" \
            "${CFG_DEFAULT_DRAW_FLAG_PARAMS[@]}" \
            "${additional_render_params[@]}" \
            -label_highlight 1
        printf "%s\n" "$out" > "$fifo"

        read_sleep 0.25

        dzen2_draw_flags out\
            services_name_map \
            services_status \
            services \
            -label "VPN" \
            "${CFG_DEFAULT_DRAW_FLAG_PARAMS[@]}" \
            "${additional_render_params[@]}"
        printf "%s\n" "$out" > "$fifo"

        read_sleep 0.25
        i=$((i - 1))
    done
}

mod_loop() {
    local fifo="$FIFO_FILE"

    if [ ${#services[@]} -eq 0 ]; then
        echo "No openvpn services to monitor."
        echo "Exiting, please set services=() if you want to monitor VPN status" >&2
        exit
    fi

    local journalctl_cmd=(journalctl -f --since now --output cat)

    # Set dict with init state
    for service in "${services[@]}"; do
        services_status["$service"]="OFF"
    done

    mod_draw "$fifo"

    printf "Checking status of services:\n"
    for service in "${services[@]}"; do
        local service_name="${service_prefix}${service}.service"
        local status
        status=$(systemctl show -p ActiveState --value "$service_name" | sed 's/inactive/OFF/;s/active/ON/')
        services_status["$service"]="$status"
        journalctl_cmd+=(-u)
        journalctl_cmd+=("${service_name}")
        printf "Update: %-16s %4s\n" "$service" "$status"
    done

    mod_draw "$fifo"

    # cut msg output all except message
    "${journalctl_cmd[@]}" | while IFS= read -r line; do
        # Check for "Stopped OpenVPN instance" and extract the service name
        if [[ "$line" == *"Stopped OpenVPN instance"* ]]; then
            local service="${line#*‘}"
            service="${service%%’*}"
            services_status["$service"]="OFF"
            printf "Update: %-16s %4s\n" "$service" "${services_status[$service]}"
        fi

        # Check for "Started OpenVPN instance" and extract the service name
        if [[ "$line" == *"Started OpenVPN instance"* ]]; then
            local service="${line#*‘}"
            service="${service%%’*}"
            services_status["$service"]="ON"
            printf "Update: %-16s %4s\n" "$service" "${services_status[$service]}"
        fi
        mod_draw "$fifo" "$line"
    done
}

mod_run
