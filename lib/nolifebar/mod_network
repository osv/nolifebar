#!/usr/bin/env bash

printf "Executing Network Plugin\n"

: "${MODULE_CORE_DIR:=$(dirname $0)}"
source "$MODULE_CORE_DIR/functions"
[ -f "$RESOURCE_FILE" ] && source "$RESOURCE_FILE"

check_dependencies bc awk

declare -A c_metric_alert_treshold
declare -A g_metric_alerts # ON/OFF if value > treshold in c_metric_alert_treshold
declare -A g_metric_values # raw values of all metrics
declare -A c_metric_fmt # how to format value
declare -A g_metric_formatted # Formatted metric values

mod_init_vars() {
    c_interval=2                # delay for rx/tx check
    c_interface="[ew]*"         # Interface, e.g wlp7s0, by default all ethernet + wifi.

    c_history_size=60           # History size for char
    c_rx_min_log_scale=3        # Received min value for logarithmic scale history, KB
    c_rx_max_log_scale=10000    # Received max, KB
    c_tx_min_log_scale=2        # Transmitted min value for logarithmic scale history, KB
    c_tx_max_log_scale=10000    # Transmitted max, KB
    c_chart_stack_padding=1     # Padding between rx/tx bars in chars
    c_chart_height=$((CFG_HEIGHT - 4)) # Height of chart with paddings
    c_additional_chart_params=(-bar_width 1)

    c_ping_interval=7           # 0 - disable
    c_ping_host="github.com"    # ip or host
    c_ping_params=(-W 2)        # Additional params to ping command, interface (-I)?

    c_monitor_ssid_interface="" # name of wifi interface to monitor connection, if empty - use first from /proc/net/wireless
    c_monitor_ssid_enable=1     # 0 - disable not check for wifi ssid

    c_check_torrent_lock_file="$HOME/.config/qBittorrent/lockfile" # if defined check for running torrent

    c_dzen2_show_short_metric=1 # use visible_metrics_short by default? RMB - toggle

    c_visible_metrics_short=('rx'   'tx'
                           'ping' 'wifi_ssid'
                          )

    c_visible_metrics_long=('rx'          'tx'
                          'rx_60'       'tx_60'
                          'ping'        'torrent_running'
                          'wifi_ssid'   'wifi_signal_level'
                          'wifi_status' 'wifi_active_interface'
                         )

    c_metric_alert_treshold=(
        ['rx']=1000 # KB
        ['tx']=1000 # KB
        ['rx_60']=800 # KB
        ['tx_60']=800 # KB
        ['ping']=300
        ['wifi_signal_level']=81
    )

    c_metric_fmt=(
        ['tx']="U %5sKB"
        ['rx']="D %5sKB"
        ['tx_60']="U60 %5sKB"
        ['rx_60']="D60 %5sKB"
        ['ping']="Ping %3s"
        ['wifi_active_interface']="Iw %s"
        ['wifi_signal_level']="Lvl -%sdb"
        ['wifi_ssid']="ID %s"
        ['wifi_status']="Wifi %s"
        ['torrent_running']="Torrnt %s"
    )

    c_popup_delay=4               # delay before hide popup
    c_popup_line_height="$CFG_POPUP_LINE_HEIGHT"
}

# Stored history
g_rx_history_values=()
g_tx_history_values=()
# Added history arrays for 60-second averages
g_rx_history_60=()
g_tx_history_60=()

mod_init_draw() {
    for ((i=0; i < c_history_size; i++)); do
        g_rx_history_values+=(0)
        g_tx_history_values+=(0)
    done
    # Initialize 60-second history arrays with 0
    for ((i=0; i < 60 / c_interval; i++)); do
        g_rx_history_60+=(0)
        g_tx_history_60+=(0)
    done

    log_scale_max_value=$(((c_chart_height / 2) - c_chart_stack_padding))
    printf "Log scale: %s points\n" "$log_scale_max_value"
    rx_scales=()
    create_log_scale rx_scales "$c_rx_min_log_scale" "$c_rx_max_log_scale" "$log_scale_max_value" # TODO: do not use 12 but calc based on height
    tx_scales=()
    create_log_scale tx_scales "$c_tx_min_log_scale" "$c_tx_max_log_scale" "$log_scale_max_value" # TODO: do not use 12 but calc based on height

    printf "Using interface for TX RX: %s\n" "$c_interface"
    interfaces=("/sys/class/net/$c_interface/statistics")

    if ((c_ping_interval)); then check_dependencies ping; fi
    if ((c_monitor_ssid_enable)); then check_dependencies iwgetid iwevent; fi

    printf "Using wifi interface: %s\n" "${c_monitor_ssid_interface:-First active}"
}

mod_draw_dzen2_log_scaled_bar() {
    local -n ref_var="$1"
    local rx="$2"
    local tx="$3"

    local output

    # Dynamically calculate scaled values on the fly
    local scaled_rx=()
    local scaled_tx=()
    for value in "${g_rx_history_values[@]}"; do
        local scaled
        find_scale_point scaled rx_scales "$value"
        scaled_rx+=("$scaled")
    done

    for value in "${g_tx_history_values[@]}"; do
        local scaled
        find_scale_point scaled tx_scales "$value"
        scaled_tx+=("$scaled")
    done

    dzen2_draw_centered_bars output \
        scaled_rx \
        scaled_tx \
        "${CFG_DEFAULT_CENTERED_BARS_PARAMS[@]}" \
        -text "NetIO" \
        "${c_additional_chart_params[@]}" \
        -height "$c_chart_height" \
        -max_value "$log_scale_max_value" \
        -stack_padding "$c_chart_stack_padding"

    ref_var="$output"
}

mod_draw_dzen2() {
    local log_scaled_history_bar
    mod_draw_dzen2_log_scaled_bar \
        log_scaled_history_bar

    local metrics=""
    if (( c_dzen2_show_short_metric == 1 )); then
        selected_metrics=c_visible_metrics_short
    else
        selected_metrics=c_visible_metrics_long
    fi
    if is_array_not_empty "$selected_metrics"; then
        dzen2_draw_flags metrics \
            g_metric_formatted \
            g_metric_alerts \
            "${selected_metrics}" \
            -label "NET" \
            "${CFG_DEFAULT_DRAW_FLAG_PARAMS[@]}" \
            -name_size 60 \
            -flag_align _LEFT \
            -flag_x_padding 3 \
            "${additional_render_params[@]}"
    fi
    printf "^ca(1, kill -SIGUSR1 $$)^ca(3, kill -SIGUSR2 $$)%s%s^ca()^ca()\n" "$metrics" "$log_scaled_history_bar"
}

mod_draw_default() {
    printf "Down: %4dKB, Up: %4dKB, Ping: 3ms\n" "${g_metric_values['rx']}" "${g_metric_values['tx']}" "${g_metric_values['ping']}"
}

dzen2_show_popup() {
    local width=$((c_popup_line_height * 18))
    local rows=9

    local x
    local y
    x11_get_good_tooltip_position x y "$width" $((c_popup_line_height * (1+rows)))

    (
        cat <<EOS
^normfg(<POPUP_FG>)
^normbg(<POPUP_BG>)
^normfn(<POPUP_FN>)
^tw()^fn(<POPUP_FN_BIG>)Network
^cs()
  TX/RX Interface: ^fg(<POPUP_BAR3>)$c_interface
  Ping to $c_ping_host: ^fg(<POPUP_BAR3>)${g_metric_values[ping]}ms
  Wifi interface    : ^fg(<POPUP_BAR3>)${g_metric_values[wifi_active_interface]} ^fg(<POPUP_BAR1>)(${g_metric_values[wifi_status]})
  Wifi signal       : ^fg(<POPUP_BAR3>)-${g_metric_values[wifi_signal_level]}db
  SSID              : ^fg(<POPUP_BAR3>)${g_metric_values[wifi_ssid]}
  Torrent app       : ^fg(<POPUP_BAR3>)${g_metric_values[torrent_running]}

  ^fg(<POPUP_BAR2>)Download: ${g_metric_values[rx_60]}KB ^right()^fg(<POPUP_BAR1>)Upload: ${g_metric_values[tx_60]}KB .
  ^center()^fn(<POPUP_FN_SMALL>)*Network activity in the last 60 seconds
EOS
    )   | nolifebar-replacer "$CFG_REPLACER_FILE" \
        | "${CFG_DZEN2_POPUP_CMD[@]}" -p "$c_popup_delay" \
        -x "$x" -y "$y" -w "$width" -h "$c_popup_line_height" \
        -l "$rows" \
        -sa 'l' -ta 'c' \
        -e 'onstart=uncollapse;button1=exit;button3=exit'

}

dzen2_toggle_short_metric() {
    c_dzen2_show_short_metric=$((c_dzen2_show_short_metric ? 0 : 1))
    printf "Signal received: c_dzen2_show_short_metric=%s\n" "$c_dzen2_show_short_metric"
    mod_draw > "$FIFO_FILE" &   # Update immediately
}

trap dzen2_toggle_short_metric SIGUSR1
trap 'dzen2_show_popup&' SIGUSR2

get_wireless_interface_and_signal() {
    local -n interface_ref="$1"
    local -n signal_ref="$2"
    local _interface="$3"

    # Check if /proc/net/wireless exists
    # Static variable to track if the file check message has been printed
    local -g file_check_done
    if [ ! -f /proc/net/wireless ]; then
        if [ -z "$file_check_done" ]; then
            printf "File /proc/net/wireless does not exist or is not accessible.\n" >&2
            file_check_done=1
        fi
        return 1
    fi

    # If interface is not provided, find the first wireless interface
    if [ -z "$_interface" ]; then
        while IFS= read -r line; do
            # Check if the first word ends with a colon
            if [[ "$line" =~ ^[[:alnum:]]+[:] ]]; then
                # Extract the interface name before the first colon
                _interface="${line%%:*}"
                break
            fi
        done < /proc/net/wireless

        if [ -z "$_interface" ]; then
            return 1
        fi
    fi
    interface_ref="$_interface"

    # Now that we have the interface, find its signal level
    while IFS= read -r line; do
        if [[ "$line" =~ ^"$_interface:" ]]; then
            # Split the line into an array by spaces
            IFS=' ' read -r -a fields <<< "$line"

            # Signal level is the 4th field (index 3 in array)
            signal_level="${fields[3]}"

            # Remove any decimal part if present
            signal_level="${signal_level%.*}"
            # negate value, "-" will be added at format time
            signal_ref=$((-signal_level))
            return 0
        fi
    done < /proc/net/wireless

    return 1
}

get_wifi_ssid() {
    local -n ssid_ref="$1"
    ssid_ref=$(iwgetid -r "$c_monitor_ssid_interface")
}

run_wifi_ssid_monitor_cmd() {
    local file_name="$1"
    printf "%s\n" "--" > "$file_name"
    if ((!c_monitor_ssid_enable)); then return; fi

    printf "Starting iwevent cmd (wifi event monitor)\n"

    iwgetid -r ${c_monitor_ssid_interface:+$c_monitor_ssid_interface} > "$file_name"
    while true; do
        iwevent 2>/dev/null \
            | grep --line-buffered 'New Access Point/Cell address' \
            | while read -r line; do
            read_sleep 2 # some delay before fetch ssid
            iwgetid -r ${c_monitor_ssid_interface:+$c_monitor_ssid_interface} > "$file_name"
        done

        local delay=30
        printf "Poll wifi event failure, restarting iwevent cmd in %ss\n" "$delay"
        read_sleep "$delay"
    done
}

run_ping_cmd() {
    local file_name="$1"

    printf "%s\n" "--" > "$file_name"
    if ((c_ping_interval <= 0)); then return; fi

    printf "Starting ping cmd\n. Interval: %ss\n. Host: %s\n" "$c_ping_interval" "$c_ping_host"
    while true; do

        ping "$c_ping_host" \
            -i "$c_ping_interval" \
            "${c_ping_params[@]}" \
            | while read -r line; do
            # Extract the part after "time="
            ping_time="${line#*time=}"
            # Extract the part before "." to get just the number, eg. 12.3 ms
            ping_time="${ping_time%%.*}"
            # Extract the part before " " to get just the number, e.g 12 ms
            ping_time="${ping_time%% *}"
            # Truncate the file and write the line
            printf "%s\n" "$ping_time" > "$file_name"
        done

        local delay=30
        printf "Ping failed, restarting ping cmd in %ss\n" "$delay"
        # network failure? lets sleep for some time and try again
        printf "%s\n" "--" > "$file_name"
        read_sleep "$delay"
    done
}

# Function to get network data in KB, returns (received transmitted)
get_network_data() {
    local -n rx_var_ref="$1"
    local -n tx_var_ref="$2"

    local rx_bytes=0
    local tx_bytes=0

    local interface
    for interface in "${interfaces[@]}"; do
        for rx_file in $interface/rx_bytes; do
            if [ -f "$rx_file" ]; then
                read -r value < "$rx_file"
                rx_bytes=$((rx_bytes + value))
            fi
        done
        for tx_file in $interface/tx_bytes; do
            if [ -f "$tx_file" ]; then
                read -r value < "$tx_file"
                tx_bytes=$((tx_bytes + value))
            fi
        done
    done

    # Convert bytes to kilobytes
    rx_kb=$((rx_bytes / 1024))
    tx_kb=$((tx_bytes / 1024))

    rx_var_ref="$rx_kb"
    tx_var_ref="$tx_kb"
}

cleanup() {
    if kill -0 "$global_subshell_ping_pid" 2>/dev/null; then
        kill "$global_subshell_ping_pid" 2>/dev/null
    fi
    if kill -0 "$global_subshell_ssid_pid" 2>/dev/null; then
        kill "$global_subshell_ssid_pid" 2>/dev/null
    fi
}

trap "cleanup" EXIT

mod_loop() {
    local initial_rx=0
    local initial_tx=0

    local ping_value_file="$TMP_DIR/network_ping_value"
    run_ping_cmd "$ping_value_file" & # Run in background ping command
    global_subshell_ping_pid=$!

    local wifi_ssid_value_file="$TMP_DIR/network_ssid_value"
    run_wifi_ssid_monitor_cmd "$wifi_ssid_value_file" & # run in background monitor for ssid change
    global_subshell_ssid_pid=$!

    get_network_data initial_rx initial_tx

    while true; do
        local current_rx=0
        local current_tx=0
        get_network_data current_rx current_tx

        rx=$(((current_rx - initial_rx) / c_interval))
        tx=$(((current_tx - initial_tx) / c_interval))

        # Update current history
        g_rx_history_values+=("$rx")
        g_tx_history_values+=("$tx")

        # Maintain c_history_size for drawing
        g_rx_history_values=("${g_rx_history_values[@]:1}")
        g_tx_history_values=("${g_tx_history_values[@]:1}")

        # Update 60-second history
        g_rx_history_60+=("$rx")
        g_tx_history_60+=("$tx")

        # Ensure 60-second history does not exceed 60/interval entries
        if [ "${#g_rx_history_60[@]}" -gt $((60 / c_interval)) ]; then
            g_rx_history_60=("${g_rx_history_60[@]:1}")
            g_tx_history_60=("${g_tx_history_60[@]:1}")
        fi

        # Calculate average over the last 60 seconds
        local sum_rx=0
        local sum_tx=0
        for val in "${g_rx_history_60[@]}"; do
            sum_rx=$((sum_rx + val))
        done
        for val in "${g_tx_history_60[@]}"; do
            sum_tx=$((sum_tx + val))
        done

        local avg_rx=0
        local avg_tx=0
        if [ "${#g_rx_history_60[@]}" -gt 0 ]; then
            avg_rx=$((sum_rx / ${#g_rx_history_60[@]}))
        fi
        if [ "${#g_tx_history_60[@]}" -gt 0 ]; then
            avg_tx=$((sum_tx / ${#g_tx_history_60[@]}))
        fi

        initial_rx=$current_rx
        initial_tx=$current_tx

        g_metric_values["tx"]="$tx"
        g_metric_values["rx"]="$rx"

        # Assign average metrics
        g_metric_values["tx_60"]="$avg_tx"
        g_metric_values["rx_60"]="$avg_rx"

        # Get ping from background running command
        g_metric_values["ping"]="--"
        if read -t 0.1 -r line < "$ping_value_file"; then g_metric_values["ping"]="$line"; fi

        # Get wifi ssid from background running command
        g_metric_values['wifi_ssid']="-"
        if read -t 0.1 -r line < "$wifi_ssid_value_file"; then g_metric_values['wifi_ssid']="$line"; fi

        # read files for wifi interface and signal level
        local active_wifi_interface="--"
        local signal_level="-"
        get_wireless_interface_and_signal active_wifi_interface signal_level "$c_monitor_ssid_interface"
        g_metric_values["wifi_active_interface"]="$active_wifi_interface"
        g_metric_values["wifi_signal_level"]="$signal_level"
        if [ "$active_wifi_interface" == "--" ]; then
            g_metric_values['wifi_status']="Off"
        else
            g_metric_values['wifi_status']="On"
        fi

        # Check for running torrent
        if [ -n "$c_check_torrent_lock_file" ]; then
            if [ -f "$c_check_torrent_lock_file" ]; then
                g_metric_values['torrent_running']="On"
            else
                g_metric_values['torrent_running']="--"
            fi
        fi

        update_threshold g_metric_alerts g_metric_values c_metric_alert_treshold
        apply_dictionary_value_format g_metric_formatted g_metric_values c_metric_fmt

        mod_draw > "$FIFO_FILE"
        read_sleep "$c_interval"
    done
}

mod_run
