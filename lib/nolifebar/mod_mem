#!/usr/bin/env bash

printf "Executing Memory Plugin\n"

: "${MODULE_CORE_DIR:=$(dirname $0)}"
source "$MODULE_CORE_DIR/functions"
[ -f "$RESOURCE_FILE" ] && source "$RESOURCE_FILE"

# Declare the associative array memstat
declare -A g_memstat

mod_init_vars() {
    c_interval=2
    c_popup_delay=4
    c_popup_line_height="$CFG_POPUP_LINE_HEIGHT"
}

mod_draw_default() {
    printf "%d%%\n" "${g_memstat[used_percentage]}"
}

dzen2_show_popup() {
    local width=$((c_popup_line_height * 18))
    local rows=8

    local x
    local y
    x11_get_good_tooltip_position x y "$width" $((c_popup_line_height * (1+rows)))

    local mem_available="${g_memstat[mem_available]}"
    local used_percentage="${g_memstat[used_percentage]}"
    local mem_total="${g_memstat[mem_total]}"
    local mem_used="${g_memstat[mem_used]}"
    local mem_buffers="${g_memstat[mem_buffers]}"
    local mem_cached="${g_memstat[mem_cached]}"
    local mem_shared="${g_memstat[mem_shared]}"
    local mem_swap_total="${g_memstat[mem_swap_total]}"
    local mem_used_swap="${g_memstat[mem_used_swap]}"
    local zfs_arc_size="${g_memstat[zfs_arc_size]}"
    local mem_buf_and_shared=$((mem_buffers + mem_shared))
    local mem_used_without_arc=$((mem_used - zfs_arc_size))

    local swap_percentage="--"
    if ((mem_swap_total > 0)); then
        swap_percentage=$((100 * mem_used_swap / mem_swap_total))
    fi

    local mem_bar
    dzen2_draw_stacked_bar mem_bar \
        -width $((width - c_popup_line_height)) \
        -height $((c_popup_line_height / 2)) \
        -draw_outline \
        -fg_colors '<POPUP_BAR1>,<POPUP_BAR2>,<POPUP_BAR3>,<POPUP_BAR4>' \
        -values "${zfs_arc_size},${mem_used_without_arc},${mem_buf_and_shared},${mem_cached}" \
        -padding 1 \
        -max_value "${mem_total}"

    # gb_* - memory usage in gigabytes
    local gb_mem_total
    local gb_mem_available
    local gb_mem_used
    local gb_zfs_arc_size
    local gb_mem_used_without_arc
    local gb_mem_buf_and_shared
    local gb_mem_cached
    local gb_mem_used_swap
    local gb_mem_swap_total
    bytes_to_gigabytes_rounded gb_mem_total $((mem_total * 1024))
    bytes_to_gigabytes_rounded gb_mem_available $((mem_available * 1024))
    bytes_to_gigabytes_rounded gb_mem_used $((mem_used * 1024))
    bytes_to_gigabytes_rounded gb_zfs_arc_size $((zfs_arc_size * 1024))
    bytes_to_gigabytes_rounded gb_mem_used_without_arc $((mem_used_without_arc * 1024))
    bytes_to_gigabytes_rounded gb_mem_buf_and_shared $((mem_buf_and_shared * 1024))
    bytes_to_gigabytes_rounded gb_mem_cached $((mem_cached * 1024))
    bytes_to_gigabytes_rounded gb_mem_used_swap $((mem_used_swap * 1024))
    bytes_to_gigabytes_rounded gb_mem_swap_total $((mem_swap_total * 1024))

    swap_stat=""
    if ((mem_swap_total > 0)); then
         swap_stat="(${gb_mem_used_swap}/${gb_mem_swap_total}GB)"
    fi

    (
        cat <<EOS
^normfg(<POPUP_FG>)
^normbg(<POPUP_BG>)
^normfn(<POPUP_FN>)
^tw()^fn(<POPUP_FN_BIG>)Memory
^cs()
  Used Memory : ${used_percentage}% (${gb_mem_used}/${gb_mem_total}GB)
  Swap        : ${swap_percentage}% $swap_stat
  Available   : ${gb_mem_available}GB
^center()$mem_bar
^fg(<POPUP_BAR1>)  ZFS ARC : ${gb_zfs_arc_size}GB
^fg(<POPUP_BAR2>)  Used    : ${gb_mem_used_without_arc}GB ^fn(<POPUP_FN_SMALL>)(used - zfs)
^fg(<POPUP_BAR3>)  Bufers  : ${gb_mem_buf_and_shared}GB
^fg(<POPUP_BAR4>)  Cache   : ${gb_mem_cached}GB ^fn(<POPUP_FN_SMALL>)(cached + sreclaimable - shared)
EOS
    )   | nolifebar-replacer "$CFG_REPLACER_FILE" \
        | "${CFG_DZEN2_POPUP_CMD[@]}" -p "$c_popup_delay" \
          -x "$x" -y "$y" -w "$width" -h "$c_popup_line_height" \
          -l "$rows" \
          -sa 'l' -ta 'c' \
          -e 'onstart=uncollapse;button1=exit;button3=exit'
}

trap 'dzen2_show_popup&' SIGUSR2

mod_loop() {
    while true; do
        # Initialize g_memstat associative array
        g_memstat=(
            [mem_total]=0
            [mem_free]=0
            [mem_available]=0
            [mem_buffers]=0
            [mem_cached]=0
            [mem_shared]=0
            [mem_sreclaimable]=0
            [mem_swap_total]=0
            [mem_swap_cache]=0
            [mem_swap_free]=0
            [zfs_arc_size]=0
        )

        while IFS= read -r line; do
            if [[ "$line" == MemTotal:* ]]; then
                g_memstat[mem_total]=${line#MemTotal: }
                g_memstat[mem_total]=${g_memstat[mem_total]% kB}
            elif [[ "$line" == MemFree:* ]]; then
                g_memstat[mem_free]=${line#MemFree: }
                g_memstat[mem_free]=${g_memstat[mem_free]% kB}
            elif [[ "$line" == MemAvailable:* ]]; then
                g_memstat[mem_available]=${line#MemAvailable: }
                g_memstat[mem_available]=${g_memstat[mem_available]% kB}
            elif [[ "$line" == Buffers:* ]]; then
                g_memstat[mem_buffers]=${line#Buffers: }
                g_memstat[mem_buffers]=${g_memstat[mem_buffers]% kB}
            elif [[ "$line" == Cached:* ]]; then
                g_memstat[mem_cached]=${line#Cached: }
                g_memstat[mem_cached]=${g_memstat[mem_cached]% kB}
            elif [[ "$line" == Shmem:* ]]; then
                g_memstat[mem_shared]=${line#Shmem: }
                g_memstat[mem_shared]=${g_memstat[mem_shared]% kB}
            elif [[ "$line" == SReclaimable:* ]]; then
                g_memstat[mem_sreclaimable]=${line#SReclaimable: }
                g_memstat[mem_sreclaimable]=${g_memstat[mem_sreclaimable]% kB}
            elif [[ "$line" == SwapTotal:* ]]; then
                g_memstat[mem_swap_total]=${line#SwapTotal: }
                g_memstat[mem_swap_total]=${g_memstat[mem_swap_total]% kB}
            elif [[ "$line" == SwapCached:* ]]; then
                g_memstat[mem_swap_cache]=${line#SwapCached: }
                g_memstat[mem_swap_cache]=${g_memstat[mem_swap_cache]% kB}
            elif [[ "$line" == SwapFree:* ]]; then
                g_memstat[mem_swap_free]=${line#SwapFree: }
                g_memstat[mem_swap_free]=${g_memstat[mem_swap_free]% kB}
            fi
        done < /proc/meminfo

        if [[ -e "/proc/spl/kstat/zfs/arcstats" ]]; then
            while read -r key type value; do
                if [ "$key" = "size" ]; then
                    g_memstat[zfs_arc_size]=$((value / 1024))
                    break
                fi
            done < /proc/spl/kstat/zfs/arcstats
        fi

        # Adjust mem_cached and calculate mem_used
        g_memstat[mem_cached]=$((g_memstat[mem_cached] + g_memstat[mem_sreclaimable] - g_memstat[mem_shared]))
        local used_diff=$((g_memstat[mem_free] + g_memstat[mem_cached] + g_memstat[mem_sreclaimable] + g_memstat[mem_buffers]))
        g_memstat[mem_used]=$((g_memstat[mem_total] >= used_diff ? g_memstat[mem_total] - used_diff : g_memstat[mem_total] - g_memstat[mem_free]))

        g_memstat[mem_available]=$((g_memstat[mem_available] != 0 ? g_memstat[mem_available] : g_memstat[mem_free]))
        g_memstat[mem_used_swap]=$((g_memstat[mem_swap_total] - g_memstat[mem_swap_free] - g_memstat[mem_swap_cache]))
        g_memstat[used_percentage]=$((g_memstat[mem_used] * 100 / g_memstat[mem_total]))

        mod_draw > "$FIFO_FILE"

        read_sleep "$c_interval"
    done
}

mod_run
