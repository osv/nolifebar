#!/usr/bin/env bash

printf "Executing Pulseaudio Plugin\n"

[ -f "$RESOURCE_FILE" ] && source "$RESOURCE_FILE"
: "${MODULE_CORE_DIR:=$(dirname $0)}"
. "$MODULE_CORE_DIR/functions"
: "${TMP_DIR:=/tmp}"

check_dependencies nolifebar-pa-status pactl

mod_init_vars() {
    sink_name="default"         # PulseAudio sink name to monitor.
    toggle_volume_min=20        # Volume level on right-click. Click again to restore the volume level.
}

mod_draw_default() {
    local -n ref_var="$1"
    local volume="$2"
    local muted="$3"
    local sink="$4"
    local ref_var="Muted   "
    if [[ "$muted" != "yes" ]]; then
        printf -v ref_var "Vol: %2s%%" "$volume"
    fi
}

mod_draw_dzen2() {
    local -n ref_var="$1"
    local volume="$2"
    local muted="$3"
    local sink="$4"
    local res="Muted   "
    if [[ "$muted" != "yes" ]]; then
        printf -v res "Vol: %2s%%" "$volume"
    fi
    ref_var="^ca(4, pactl set-sink-volume '$sink' +5%)\
^ca(5, pactl set-sink-volume '$sink' -5%)\
^ca(1, pactl set-sink-mute '$sink' toggle)\
^ca(3, kill -SIGUSR1 $$)\
$res\
^ca()^ca()^ca()^ca()"
}

g_toggle_volume=35  # Default toggle volume

dzen2_toggle_volume_level() {
    local current_volume
    current_volume=$(pactl get-sink-volume "$g_sink" | awk '{print $5}' | tr -d '%')

    if [[ "$current_volume" -eq "$toggle_volume_min" ]]; then
        pactl set-sink-volume "$g_sink" "${g_toggle_volume}%"
    else
        g_toggle_volume="$current_volume"
        pactl set-sink-volume "$g_sink" "35%"
    fi
}

trap dzen2_toggle_volume_level SIGUSR1

mod_loop() {
    # Save current sink in g_sink, for toggle functionality
    while IFS=" " read -r vol_column volume mute_column muted sink_column g_sink; do
        local output
        mod_draw output "$volume" "$muted" "$g_sink"
        printf "%s\n" "$output" > "$FIFO_FILE"
    done < <(nolifebar-pa-status "$sink_name")
}

mod_run
