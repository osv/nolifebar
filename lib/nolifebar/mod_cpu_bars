#!/usr/bin/env bash

set -e

printf "Executing CPU Bars Plugin\n"

: "${MODULE_CORE_DIR:=$(dirname $0)}"
. "$MODULE_CORE_DIR/functions"
[ -f "$RESOURCE_FILE" ] && source "$RESOURCE_FILE"

mod_init_vars() {
    c_interval=1
    c_additional_core_params=()
    c_additional_total_params=()

    c_popup_delay=4               # delay before hide popup
    c_popup_line_height="$CFG_POPUP_LINE_HEIGHT"
    c_popup_line_width=$((CFG_POPUP_LINE_HEIGHT * 25))
    c_popup_rows=13
}

g_show_total_only=0

mod_draw_dzen2() {
    local total_stats_dzen="$1"
    local cores_stats_dzen="$2"
    local total_cpu_perc="$3"
    local total_nice_perc="$4"
    local total_user_perc="$5"
    local total_system_perc="$6"
    local total_virt_perc="$7"
    local txt=""
    if ((g_show_total_only)); then
        local colors=()
        #extract_param_value "-fg_colors" "${c_additional_total_params[@]}")
        extract_param_value colors "-fg_colors" "${c_additional_total_params[@]}"
        if [ -z "$colors" ]; then
            colors=("${CFG_DEFAULT_STACK_COLORS[@]}")
        else
            IFS=',' read -r -a colors <<< "$colors"
        fi
        printf -v txt "CPU: ^fg(%s)Low %s%%^fg(%s)  Normal %s%%^fg(%s)  System %s%%^fg(%s)  Guest %s%%" \
            "${colors[0]}" "$total_nice_perc" \
            "${colors[1]}" "$total_user_perc" \
            "${colors[2]}" "$total_system_perc" \
            "${colors[3]}" "$total_virt_perc"
    else
        printf -v txt "%s%s" \
            "$total_stats_dzen" \
            "$cores_stats_dzen"
    fi
    # 1 - left click toggle show total cpu only
    printf "^ca(1, kill -SIGUSR1 $$)^ca(3, kill -SIGUSR2 $$)%s^ca()^ca()\n" "$txt"
}

toggle_cpu_view() {
  echo "Signal received: g_show_total_only=${g_show_total_only}"
  g_show_total_only=$((g_show_total_only ? 0 : 1))
  update &
}

dzen2_show_popup() {
    local width="$c_popup_line_width"
    local rows="$c_popup_rows"

    kill_process() {
        local PID=$1
        if [[ -n "$PID" ]]; then
            if kill -9 "$PID"; then
                notify-send "Process $PID killed"
            else
                notify-send "Failed to kill $PID"
            fi
        fi
    }

    local x y
    x11_get_good_tooltip_position x y "$width" $((c_popup_line_height * (1+rows)))

    # Start dzen2 as a coprocess without subshells
    coproc DZEN2_PROC {
        "${CFG_DZEN2_POPUP_CMD[@]}" \
            -x "$x" -y "$y" -w "$width" -h "$c_popup_line_height" \
            -l "$rows" -p "$c_popup_delay" \
            -sa 'l' -ta 'c' \
            -e 'onstart=uncollapse;button1=exec:print REFRESH;button3=exit'
    }
    # Assign the coprocess file descriptors to variables
    exec {DZEN_IN}>&"${DZEN2_PROC[1]}"
    exec {DZEN_OUT}<&"${DZEN2_PROC[0]}"

    # Ensure the coprocess started successfully
    if [[ -z "${DZEN2_PROC_PID}" ]]; then
        echo "Failed to start dzen2 coprocess"
        return 1
    fi

    # Function to generate and send the process list to dzen2
    send_process_list() {
        {
            printf "^cs()\n"
            printf "     Command         CPU    MEM  Arguments\n"
            ps -eo pid,comm,%cpu,%mem,args --sort=-%cpu \
                | head -n $((rows - 1)) \
                | tail -n +2 \
                | awk '{
                # Extract the last component of the command from args (column 5 onwards)
                split($5, arg_parts, "/");
                cmd = arg_parts[length(arg_parts)];  # Get the last part of the command
                for (i = 6; i <= NF; i++) cmd = cmd " " $i;  # Append remaining arguments
                printf " ^ca(1, echo KILL %s)[X]^ca() ^fg(<POPUP_BAR1>)%-15s ^fg(<POPUP_BAR2>)%4s%% ^fg(<POPUP_BAR3>)%4s%% ^fn(<POPUP_FN_SMALL>)^fg(<POPUP_BAR4>)%-s\n", $1, $2, $3, $4, cmd;
            }'
            printf "^fn(<POPUP_FN_SMALL>)^fg(<POPUP_BAR4>)  Click \"[X]\" to kill -9. Left Mouse Click - refresh, Right Mouse Click - quit\n"
        } | nolifebar-replacer "$CFG_REPLACER_FILE" >&$DZEN_IN
    }

    # Send initial settings and process list to dzen2
    {
                cat <<EOS
^normfg(<POPUP_FG>)
^normbg(<POPUP_BG>)
^normfn(<POPUP_FN>)
^tw()^fn(<POPUP_FN_BIG>)Process list
^cs
EOS
    } | nolifebar-replacer "$CFG_REPLACER_FILE" >&$DZEN_IN
    send_process_list

    while true; do
        # Wait for a command from dzen2
        if read -r command <&$DZEN_OUT; then
            case "$command" in
                KILL\ *)
                    # Extract PID and kill the process
                    PID=${command#KILL }
                    kill_process "$PID"
                    send_process_list
                    ;;
                REFRESH)
                    send_process_list
                    ;;
                *)
                    echo "Unknown command: $command"
                    ;;
            esac
        else
            # dzen2 has closed or an error occurred
            break
        fi
    done

    # Close file descriptors and wait for the coprocess to exit
    exec {DZEN_IN}>&-
    exec {DZEN_OUT}<&-
    wait "${DZEN2_PROC_PID}"
}

trap 'toggle_cpu_view' SIGUSR1
trap 'dzen2_show_popup&' SIGUSR2

declare -a g_previous_stats
declare -a g_current_stats

get_cpu_stats() {
    local -n cpu_stats=$1
    cpu_stats=()
    while read -r line; do
        if [[ $line =~ ^cpu ]]; then
            cpu_stats+=("$line")
        fi
    done < /proc/stat
}

# Function to calculate and print CPU usage
calculate_and_print_usage() {
    local result_cores=""
    local result_total=""
    local total_cpu_perc=0
    local total_nice_perc=0
    local total_user_perc=0
    local total_system_perc=0
    local total_virt_perc=0

    for i in "${!g_previous_stats[@]}"; do
        local previous=(${g_previous_stats[i]})
        local current=(${g_current_stats[i]})
        local cpu_identifier="${current[0]}"

        local prev_user="${previous[1]}"
        local prev_nice="${previous[2]}"
        local prev_system="${previous[3]}"
        local prev_idle="${previous[4]}"
        local prev_iowait="${previous[5]}"
        local prev_irq="${previous[6]}"
        local prev_softirq="${previous[7]}"
        local prev_steal="${previous[8]:-0}" # Might be optional for some kernel
        local prev_guest="${previous[9]:-0}"
        local prev_guest_nice="${previous[10]:-0}"

        local cur_user="${current[1]}"
        local cur_nice="${current[2]}"
        local cur_system="${current[3]}"
        local cur_idle="${current[4]}"
        local cur_iowait="${current[5]}"
        local cur_irq="${current[6]}"
        local cur_softirq="${current[7]}"
        local cur_steal="${current[8]:-0}"
        local cur_guest="${current[9]:-0}"
        local cur_guest_nice="${current[10]:-0}"

        local user_delta=$((cur_user - prev_user))
        local nice_delta=$((cur_nice - prev_nice))
        local system_delta=$((cur_system - prev_system))
        local idle_delta=$((cur_idle - prev_idle))
        local iowait_delta=$((cur_iowait - prev_iowait))
        local irq_delta=$((cur_irq - prev_irq))
        local softirq_delta=$((cur_softirq - prev_softirq))
        local steal_delta=$((cur_steal - prev_steal))
        local guest_delta=$((cur_guest - prev_guest))
        local guest_nice_delta=$((cur_guest_nice - prev_guest_nice))

        local idle_alltime_delta=$((idle_delta + iowait_delta));
        local system_alltime_delta=$((system_delta + irq_delta + softirq_delta));
        local virt_alltime_delta=$((guest_delta + guest_nice_delta));

        local total_delta=$((user_delta + nice_delta +
                            system_alltime_delta + idle_alltime_delta +
                            steal_delta + virt_alltime_delta))

        if ((total_delta == 0)); then
            total_delta=1
        fi

        local user_usage=$((1000 * user_delta / total_delta)) # Normal
        local nice_usage=$((1000 * nice_delta / total_delta)) # Low
        local system_usage=$((1000 * system_alltime_delta / total_delta)) # Kernel
        local virt_usage=$((1000 * virt_alltime_delta / total_delta)) # Guest

        local stats="${nice_usage},$user_usage,$system_usage,$virt_usage"

        if [[ "$cpu_identifier" == "cpu" ]]; then
            result_total="${stats}"
            total_cpu_perc=$(((nice_usage + user_usage + system_usage + virt_usage) / 10))
            total_nice_perc=$((nice_usage / 10))
            total_user_perc=$((user_usage / 10))
            total_system_perc=$((system_usage / 10))
            total_virt_perc=$((virt_usage / 10))
        else
            if [ -z "${result_cores}" ]; then
                result_cores="${stats}"
            else
                result_cores="${result_cores},${stats}"
            fi
        fi
    done

    local total_stats_dzen=""
    dzen2_draw_h_stacked_bars total_stats_dzen \
        "${CFG_DEFAULT_STACK_BAR_PARAMS[@]}" \
        -bar_width 5 \
        "${c_additional_total_params[@]}" \
        -max_value 1000 \
        -stacks 4 \
        -values "$result_total"
    local cores_stats_dzen=""
    dzen2_draw_h_stacked_bars cores_stats_dzen \
        "${CFG_DEFAULT_STACK_BAR_PARAMS[@]}" \
        -bar_width 3 \
        -text "CPU ${total_cpu_perc}%" \
        "${c_additional_core_params[@]}" \
        -max_value 1000 \
        -stacks 4 \
        -values "$result_cores"

    mod_draw \
        "$total_stats_dzen" \
        "$cores_stats_dzen" \
        "$total_cpu_perc" \
        "$total_nice_perc" \
        "$total_user_perc" \
        "$total_system_perc" \
        "$total_virt_perc"
}

update() {
    calculate_and_print_usage > "$FIFO_FILE"
}

mod_loop() {
    while true; do
        declare -a g_previous_stats
        get_cpu_stats g_previous_stats
        read_sleep "$c_interval"
        declare -a g_current_stats
        get_cpu_stats g_current_stats
        update
    done
}

mod_run
