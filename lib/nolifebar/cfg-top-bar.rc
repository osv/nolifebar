#!/usr/bin/env bash

# Note: dzen max len is 8k, you cannot use big count of bars
# #define MAX_LINE_LEN   8192

# Each variable can have next prefixes:
# CFG_ - configs by main scripts and modules
# MOD_ - used by modules
# MAIN_ - used by main script

# Modules that will be loaded by main script
# Each module will evaluate this file
#
# Exported variables from main script:
#   $RESOURCE_FILE - Path to this file. Usually module must evaluate this, e.g: [ -f "$RESOURCE_FILE" ] && source "$RESOURCE_FILE"
#   $TMP_DIR - path to temp directory. Module must create temp files in this directory
#   $MOD_NAME - upper case of current module, usuful if you want to have shared code between modules and eval
#   $MODULE_CORE_DIR - dir to library of this project (shared bash code, modules)
CFG_MODULES=("disk_io" "ua_alerts" "pulse" "xkbd" "xworkspaces" "xtitle" "mem" "time" "network" "cpu_bars" "cava_out" "cava_in" "openvpn" "nvidia")

# # Draw backend: dzen2 (default), lemonbar, text
# # Depending on the value, the appropriate draw function will be selected
# CFG_BACKEND=dzen2

# # Uncomment to output data for dzen2 to STDOUT for debugging
# DEBUG=true
# CFG_REPLACE_TXT="$THEME_CATPPUCCIN_FRAPPE"
# CFG_REPLACE_TXT="$THEME_CATPPUCCIN_LATTE"
CFG_REPLACE_TXT="$THEME_CATPPUCCIN_MACCHIATO"
# CFG_REPLACE_TXT="$THEME_CATPPUCCIN_MOCHA"
# CFG_REPLACE_TXT="$THEME_MIRROR_EDGE"
# CFG_REPLACE_TXT="$THEME_NORD"
# Replace text before sending to status bar programm

# # Replace text before sending to status bar programm
# CFG_REPLACE_TXT="
# <FN_MAIN>    : RobotoMono Nerd Font:size=14:style=Light
# <FN_MEDIUM>  : RobotoMono Nerd Font:size=12:style=Light
# <FN_2_ROWS>  : RobotoMono Nerd Font:size=7
# $THEME_MIRROR_EDGE
# "


# Some functions uses this for draw rects
CFG_HEIGHT=30
CFG_POPUP_LINE_HEIGHT=22
# Status bar command, dzen2
# CFG_STATUS_BAR_CMD=(/home/osv/work/other/repos/github.com/robm/dzen/dzen2 -dock
#                     -bg "$BG"
#                     -fg "$FG"
#                     -ta l -h "${CFG_HEIGHT}")

CFG_STATUS_BAR_CMD=(/home/osv/work/other/repos/github.com/robm/dzen/src/dzen2 -dock
                    -e "button3="
                    -ta l -h "${CFG_HEIGHT}")

CFG_DZEN2_POPUP_CMD=(/home/osv/work/other/repos/github.com/robm/dzen/src/dzen2)

# Default params for stack bar
CFG_DEFAULT_STACK_BAR_PARAMS=(
  -bg '<WIDGET_BG>'
  -bottom_margin 2
  -height "$((CFG_HEIGHT - 4))"
)

# Default params for Y-centered stack bar
CFG_DEFAULT_CENTERED_BARS_PARAMS=(
  -bg '<WIDGET_BG>'
  -bar_padding 1
  -stack_padding 1
)

# # Default colors for stack bars. Some modules might have other var to override colors
CFG_DEFAULT_STACK_COLORS=("<BAR1>" "<BAR2>" "<BAR3>" "<BAR4>")

# CFG_DEFAULT_DRAW_FLAG_PARAMS=(
#   -label_size 45 # size of label
#   -label_highlight 0
#   -name_size 50
#   -y_padding 2
#   -fn_main "<FN_MAIN>"
#   -fn_2rows "<FN_2_ROWS>"
#   -fn_2rows_y_offset 0
#   -flag_align "_CENTER"
#   -flag_x_padding 0
# )

# MOD_XWORKSPACES_init_vars() {
#   show_index=1                # Show workspace number
#   print_no_windows="<WS_NO_WIN> %s "                        # optional, no windows, if blank do not draw empty workspaces
#   print_with_windows="<WS_WITH_WIN> %s "                    # not active workspace with windows
#   print_current_wrapped="^p(0;-3)%s^p()"                    # optional, current workspace, including urgent
#   print_current_no_windows="<WS_CUR_NO_WIN> %s "            # current workspace, if not urgent
#   print_current_with_windows="<WS_CUR_WITH_WIN> %s "        # current workspace, if not urgent
#   print_urgent="<WS_URGENT> %s "                            # workspace with urgent hint
#   print_wrapped="^fn(<FN_MEDIUM>)%s^fg()^bg()"              # final wrapper
# }

# ################################ Network
MOD_NETWORK_init_vars() {
    interval=2                # must be integer
    interface="[ew]*"         # interface, e.g wlp7s0, by default all ethernet + wifi.
    history_size=40           # history size for char
    rx_min_log_scale=2        # received min value for logarithmic scale histoy, KB
    rx_max_log_scale=10000    # received max, KB
    tx_min_log_scale=2        # transmitted min value for logarithmic scale history, KB
    tx_max_log_scale=10000    # transmitted max, KB
    chart_stack_padding=1     # padding between rx/tx bars in chars
    chart_height=$((CFG_HEIGHT - 4)) # height of chart with paddings
    c_additional_chart_params=(
      -bar_width 1
      -bar_padding 0
    )

    c_ping_interval=7           # 0 - disable
    c_ping_host="github.com"
    c_metric_fmt[tx]="↑ %5sKB"
    c_metric_fmt[rx]="↓ %5sKB"
}

# MOD_NETWORK_draw() {
#   printf "Down: %4dKB, Up: %4dKB, Ping: 3ms\n" "${metric_values['rx']}" "${metric_values['tx']}" "${metric_values['ping']}"
# }

# ############################### Mem
MOD_MEM_init_vars() {
  interval=2
}

# draw mem and swap bars
MOD_MEM_draw_dzen2() {
  local used_percentage="${g_memstat[used_percentage]}"
  local mem_total="${g_memstat[mem_total]}"
  local mem_used="${g_memstat[mem_used]}"
  local mem_buffers="${g_memstat[mem_buffers]}"
  local mem_cached="${g_memstat[mem_cached]}"
  local mem_shared="${g_memstat[mem_shared]}"
  local mem_swap_total="${g_memstat[mem_swap_total]}"
  local mem_used_swap="${g_memstat[mem_used_swap]}"
  local zfs_arc_size="${g_memstat[zfs_arc_size]}"
  local mem_buf_and_shared=$((mem_buffers + mem_shared))
  local mem_used_without_arc=$((mem_used - zfs_arc_size))

  local bar_size=104
  local mem_bar
  dzen2_draw_stacked_bar mem_bar \
    -width "$bar_size" \
    -height 7 \
    -draw_outline \
    -values "${zfs_arc_size},${mem_used_without_arc},${mem_buf_and_shared},${mem_cached}" \
    -bg "<WIDGET_BORDER>" \
    -padding 1 \
    -max_value "${mem_total}"

  dzen2_draw_stacked_bar swap_bar \
    -width "$bar_size" \
    -height 7 \
    -draw_outline \
    -values "${mem_used_swap}" \
    -bg "<WIDGET_BORDER>" \
    -padding 1 \
    -max_value $((mem_swap_total == 0 ? 100 : mem_swap_total))

  local swap_percentage="--"
  if ((mem_swap_total > 0)); then
    swap_percentage=$((100 * mem_used_swap / mem_swap_total))
  fi

  local fmt
  printf -v fmt "^p(_TOP)^p(;2)^fg(<FG>)^fn(<FN_2_ROWS>)^ba(70,_LEFT)Mem  %3d%%" "$used_percentage"
  local out="$fmt"
  out+="^ib(1)^fg(<WIDGET_BORDER>)^r(1x7-12+1)^r(10x1-0+2)^p(2;-3)${mem_bar}^ib(1)"
  out+="^p(-175;14)^fg(<FG>)^ba(70,_LEFT)"
  printf -v fmt "Swap %3s%%" "$swap_percentage"
  out+="$fmt"
  out+="^fg(<WIDGET_BORDER>)^r(1x7-12+4)^r(10x1-0+4)^p(2;-3)${swap_bar}"
  printf "^ca(3, kill -SIGUSR2 $$)%s^ca()^p()^ib()^fn(<FN_MAIN>)\n" "$out"
}

# ############################## CPU Bar
MOD_CPU_BARS_init_vars() {
  interval=1

  # # Custom params for CPU Cores charts
  # # fg_colors for bars: Low(nice),Normal(user),Kernel,Guest
  # additional_core_params=(
  #   -bar_width 5 -height 22 -bottom_margin 1
  #   -stack_padding 1 -bar_padding 2
  #   -bg "#fff" -border_fg "#777"
  #   -fg_colors "#7f4b32,#73984d,#817c99,#777545"
  # )
  # # Custom params for Total CPU Bar
  # additional_total_params=(
  #   -bar_width 5 -height 22 -bottom_margin 1
  #   -stack_padding 1 -bar_padding 2
  #   -bg "#fff" -border_fg "#777"
  #   -fg_colors "#7f4b32,#73984d,#817c99,#777545"
  # )
}

# ############################### Cava OUT (bars)
MOD_CAVA_OUT_init_vars() {
  c_framerate=30      # FPS of cava output, default 15
  c_bars=60           # count of cava bars, default 30
  c_padding=1         # Vertical padding, default: 1

  # c_fn_create_file="MOD_CAVA_OUT_custom_create_config" # override create cava config file function

  # dzen2_draw_h_stacked_bars additional params
  c_additional_bar_params=(
    -bar_width 1
    -bar_padding 1
    -fg_colors "<BAR3>"
  )
}

# Custom create cava config
MOD_CAVA_OUT_custom_create_config() {
  local config="$1"
  cat << EOF > "$config"
[general]
bars = $c_bars
sleep_timer = 1
framerate = $c_framerate
[output]
method = raw
raw_target = /dev/stdout
data_format = ascii
ascii_max_range = $c_height
channels = mono
mono_option = average
[smoothing]
noise_reduction = 20
EOF
}

# ############################### Cava IN (bars)
MOD_CAVA_IN_init_vars() {
  c_framerate=20      # FPS of cava output, default 15
  c_bars=30           # count of cava bars, default 30
  c_padding=1         # Vertical padding, default: 1

  # c_fn_create_file="MOD_CAVA_IN_custom_create_config" # override create cava config file function

  # # dzen2_draw_h_stacked_bars additional params
  # c_additional_bar_params=(
  #   -bar_width 1
  #   -bar_padding 1
  #   -fg_colors "<BAR1>"
  # )
}

# Custom create cava config
MOD_CAVA_IN_custom_create_config() {
    local config="$1"
    check_dependencies pactl
    default_source=$(pactl info | grep "Default Source" | cut -d ' ' -f3)

    cat << EOF > "$config"
[general]
bars = $c_bars
sleep_timer = 1
framerate = $c_framerate
autosens = 0
sensitivity = $c_sensitivity

[output]
method = raw
raw_target = /dev/stdout
data_format = ascii
ascii_max_range = $c_height
mono_option = average
channels = mono
mono_option = average

[input]
method = pulse
source = "$default_source"

[smoothing]
noise_reduction = 15

EOF
}

# ############################### OpenVPN
MOD_OPENVPN_init_vars() {
  c_service_prefix="openvpn-" # systemd openvpn prefix
  c_services=(kz-production kz-development) # openvpn systemd services
  c_services_name_map=(
       ["kz-production"]="Prod"
       ["kz-development"]="Dev"
  )
  # additional_render_params=(-label "OpenVPN" -label_size "100" -color_on red -y_padding 2 -fn_2rows "terminus-8" -fn_2rows_y_offset 0)
}

# ############################### NVIDIA
MOD_NVIDIA_init_vars() {
  c_interval=6
  c_gpu_index=0

  # additional dzen2_draw_flags params
  c_additional_render_params=()

  c_gpu_metrics_alert_treshold=(
    ["fan.speed"]=10        # I want to know when fan is on
    ["power.draw"]=30       # power draw is importent for me
    ["utilization.gpu"]=70
    ["temperature.gpu"]=70
    ["utilization.decoder"]=1
    ["utilization.encoder"]=1
    ["clocks.current.graphics"]=1000
    ["clocks.current.memory"]=1000
  )

}

# Arguments: name fan_speed power_draw memory_total memory_free memory_used gpu_utilization temperature
MOD_NVIDIA_draw_dzen2() {
  memory_total="${g_gpu_metrics_value[memory.total]}"
  memory_used="${g_gpu_metrics_value[memory.used]}"

  local mem_bar
  dzen2_draw_stacked_bar mem_bar \
    -width 104 \
    -height 7 \
    -draw_outline \
    -values "$memory_used" \
    -fg_colors "<BAR1>,<BAR2>,<BAR3>,<BAR4>" \
    -bg "<WIDGET_BORDER>" \
    -padding 1 \
    -max_value "${memory_total}"

  local widget
  mod_nvidia_draw_flags widget

  local out="^p(-104)${mem_bar}^p(2)^r(10x1)^r(1x20)^p(4)^ca(1, kill -SIGUSR1 $$)^ca(3, kill -SIGUSR2 $$)${widget}^ca()^ca()"
  printf "%s\n" "$out"
}

# ############################### XTITLE
MOD_XTITLE_init_vars() {
    c_ellipsis="…"
    c_max_length="60"
    # dzen2_fonts=("Noto Sans:size=12:style=Light" "Noto Sans CJK JP:size=12:style=Light" "Noto Color Emoji:size=12:style=Light")
}

###############################
# Widget layout format function
###############################

state=""
MAIN_format_template() {
  # printf "{out_xworkspaces}\n"
  # return
  state="$1"
  echo "^normfg(<FG>)"
  sleep 0.1
  echo "^normbg(<BG>)"
  sleep 0.1
  echo "^normfn(<FN_MAIN>)"
  sleep 0.1
  if [ "$state" = 'one' ]; then
      printf "{out_mem}\n"
 else
      printf "^fn(<FN_MEDIUM>){out_xworkspaces} ^fg(<FG>){out_xtitle}\
^right() {out_network}{out_openvpn} {out_cpu_bars} {out_mem}{out_nvidia} {out_disk_io}\
^fg()^fn() ^i(./share/nolifebar/vol20b.xbm)\
 {out_pulse} {out_cava_out}{out_cava_in} ^fg(<FG>){out_time}\
 {out_xkbd} {out_ua_alerts}
\n"
  fi

}
