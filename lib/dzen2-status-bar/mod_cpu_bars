#!/usr/bin/env bash

set -e

echo "Executing CPU Bars Plugin"

[ -f "$RESOURCE_FILE" ] && source "$RESOURCE_FILE"
: "${MODULE_CORE_DIR:=$(dirname $0)}"
. "$MODULE_CORE_DIR/functions"

interval="${MOD_CPU_BARS_INTERVAL:-1}"
additional_core_params=()

if is_array MOD_CPU_BARS_CORES_PARAMS; then
    additional_core_params=("${MOD_CPU_BARS_CORES_PARAMS[@]}")
fi

additional_total_params=()
if is_array MOD_CPU_BARS_TOTAL_PARAMS; then
    additional_total_params=("${MOD_CPU_BARS_TOTAL_PARAMS[@]}")
fi

show_total_only=0
default_format() {
    local total_stats_dzen="$1"
    local cores_stats_dzen="$2"
    local total_cpu_perc="$3"
    local total_nice_perc="$4"
    local total_user_perc="$5"
    local total_system_perc="$6"
    local total_virt_perc="$7"

    local txt=""
    if ((show_total_only)); then
        colors=$(extract_param_value "-fg_colors" "${additional_total_params[@]}")
        if [ -z "$colors" ]; then
            colors=("${CFG_DEFAULT_STACK_COLORS[@]}")
        else
            IFS=',' read -r -a colors <<< "$colors"
        fi
        txt=$(printf "CPU: ^fg(${colors[0]})Low %d%%^fg(${colors[1]})  Normal %d%%^fg(${colors[2]})  System %d%%^fg(${colors[3]})  Guest %d%%\n" \
            "$total_nice_perc" "$total_user_perc" "$total_system_perc" "$total_virt_perc")
    else
        txt=$(printf "CPU %s%% %s^p(3)%s\n" "$total_cpu_perc" "$total_stats_dzen" "$cores_stats_dzen")
    fi
    # 1 - left click toggle show total cpu only
    printf "^ca(1, kill -SIGUSR1 $$)%s^ca()\n" "$txt"
}

handle_signal() {
  echo "Signal received: show_total_only=${show_total_only}"
  show_total_only=$((show_total_only ? 0 : 1))
  update
}

trap 'handle_signal' SIGUSR1

if declare -f MOD_CPU_BARS_fn_format > /dev/null; then
    format_function=MOD_CPU_BARS_fn_format
else
    format_function=default_format
fi

declare -a previousStats
declare -a currentStats

get_cpu_stats() {
    local -n cpu_stats=$1
    cpu_stats=()
    while read -r line; do
        if [[ $line =~ ^cpu ]]; then
            cpu_stats+=("$line")
        fi
    done < /proc/stat
}

# Function to calculate and print CPU usage
calculate_and_print_usage() {
    local result_cores=""
    local result_total=""
    local total_cpu_perc=0
    local total_nice_perc=0
    local total_user_perc=0
    local total_system_perc=0
    local total_virt_perc=0

    for i in "${!previousStats[@]}"; do
        local previousStat_elemant_array=(${previousStats[i]})
        local currentStat_elemant_array=(${currentStats[i]})
        local cpu_identifier="${currentStat_elemant_array[0]}"

        local prev_user="${previousStat_elemant_array[1]}"
        local prev_nice="${previousStat_elemant_array[2]}"
        local prev_system="${previousStat_elemant_array[3]}"
        local prev_idle="${previousStat_elemant_array[4]}"
        local prev_iowait="${previousStat_elemant_array[5]}"
        local prev_irq="${previousStat_elemant_array[6]}"
        local prev_softirq="${previousStat_elemant_array[7]}"
        local prev_steal="${previousStat_elemant_array[8]:-0}" # Might be optional for some kernel
        local prev_guest="${previousStat_elemant_array[9]:-0}"
        local prev_guest_nice="${previousStat_elemant_array[10]:-0}"

        local cur_user="${currentStat_elemant_array[1]}"
        local cur_nice="${currentStat_elemant_array[2]}"
        local cur_system="${currentStat_elemant_array[3]}"
        local cur_idle="${currentStat_elemant_array[4]}"
        local cur_iowait="${currentStat_elemant_array[5]}"
        local cur_irq="${currentStat_elemant_array[6]}"
        local cur_softirq="${currentStat_elemant_array[7]}"
        local cur_steal="${currentStat_elemant_array[8]:-0}"
        local cur_guest="${currentStat_elemant_array[9]:-0}"
        local cur_guest_nice="${currentStat_elemant_array[10]:-0}"

        local user_delta=$((cur_user - prev_user))
        local nice_delta=$((cur_nice - prev_nice))
        local system_delta=$((cur_system - prev_system))
        local idle_delta=$((cur_idle - prev_idle))
        local iowait_delta=$((cur_iowait - prev_iowait))
        local irq_delta=$((cur_irq - prev_irq))
        local softirq_delta=$((cur_softirq - prev_softirq))
        local steal_delta=$((cur_steal - prev_steal))
        local guest_delta=$((cur_guest - prev_guest))
        local guest_nice_delta=$((cur_guest_nice - prev_guest_nice))

        local idle_alltime_delta=$((idle_delta + iowait_delta));
        local system_alltime_delta=$((system_delta + irq_delta + softirq_delta));
        local virt_alltime_delta=$((guest_delta + guest_nice_delta));

        local total_delta=$((user_delta + nice_delta +
                            system_alltime_delta + idle_alltime_delta +
                            steal_delta + virt_alltime_delta))

        if ((total_delta == 0)); then
            total_delta=1
        fi

        local user_usage=$((1000 * user_delta / total_delta)) # Normal
        local nice_usage=$((1000 * nice_delta / total_delta)) # Low
        local system_usage=$((1000 * system_alltime_delta / total_delta)) # Kernel
        local virt_usage=$((1000 * virt_alltime_delta / total_delta)) # Guest

        local stats="${nice_usage},$user_usage,$system_usage,$virt_usage"

        if [[ "$cpu_identifier" == "cpu" ]]; then
            result_total="${stats}"
            total_cpu_perc=$(((nice_usage + user_usage + system_usage + virt_usage) / 10))
            total_nice_perc=$((nice_usage / 10))
            total_user_perc=$((user_usage / 10))
            total_system_perc=$((system_usage / 10))
            total_virt_perc=$((virt_usage / 10))
        else
            if [ -z "${result_cores}" ]; then
                result_cores="${stats}"
            else
                result_cores="${result_cores},${stats}"
            fi
        fi
    done

    local total_stats_dzen=""

    total_stats_dzen=$(dzen2_draw_h_stacked_bars \
        -bar_width 5 \
        "${additional_total_params[@]}" \
        -max_value 1000 \
        -stacks 4 \
        -values "$result_total")

    local cores_stats_dzen=""
    cores_stats_dzen=$(dzen2_draw_h_stacked_bars \
        -bar_width 3 \
        "${additional_core_params[@]}" \
        -max_value 1000 \
        -stacks 4 \
        -values "$result_cores")

    "$format_function" \
        "$total_stats_dzen" \
        "$cores_stats_dzen" \
        "$total_cpu_perc" \
        "$total_nice_perc" \
        "$total_user_perc" \
        "$total_system_perc" \
        "$total_virt_perc"
}

update() {
    calculate_and_print_usage > "$FIFO_FILE"
}

while true; do
    declare -a previousStats
    get_cpu_stats previousStats
    read_sleep "$interval"
    declare -a currentStats
    get_cpu_stats currentStats
    update
done
