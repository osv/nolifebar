#!/usr/bin/env bash

CFG_HEIGHT="${CFG_HEIGHT:-24}"
CFG_BACKEND="${CFG_BACKEND:-dzen2}"

# if [ -z "${CFG_REPLACE_MAP+x}" ]; then
#   declare -A CFG_REPLACE_MAP=()
# fi

if [ -z "${CFG_DEFAULT_STACK_COLORS+x}" ]; then
  CFG_DEFAULT_STACK_COLORS=('#ff8b92' '#c3e88d' '#e1acff' '#ffe585')
fi

# Generate the color variables, e.g BOLD_INTENSE_GREEN
generate_color_variables() {
    local color_names=("BLACK" "RED" "GREEN" "YELLOW" "BLUE" "MAGENTA" "CYAN" "WHITE")
    local color_codes=(30 31 32 33 34 35 36 37)
    for i in "${!color_names[@]}"; do
        eval "${color_names[$i]}=\"\x1b[${color_codes[$i]}m\""
        eval "BOLD_${color_names[$i]}=\"\x1b[1;${color_codes[$i]}m\""
        eval "UNDERLINE_${color_names[$i]}=\"\x1b[4;${color_codes[$i]}m\""
        eval "BACKGROUND_${color_names[$i]}=\"\x1b[$((40 + i))m\""
        eval "INTENSE_${color_names[$i]}=\"\x1b[$((90 + i))m\""
        eval "BOLD_INTENSE_${color_names[$i]}=\"\x1b[1;$((90 + i))m\""
        eval "BACKGROUND_INTENSE_${color_names[$i]}=\"\x1b[0;$((100 + i))m\""
    done
    RESET="\x1b[0m"
}
generate_color_variables


check_dependencies() {
    local missing_dependencies=()

    # Check for each dependency
    for dep in "$@"; do
        if ! type "$dep" &>/dev/null; then
            missing_dependencies+=("$dep")
        fi
    done

    # If there are missing dependencies, print them and exit
    if [ ${#missing_dependencies[@]} -ne 0 ]; then
        echo >&2 "Missing executables: ${missing_dependencies[@]}"
        echo >&2 "Exiting"
        exit 1
    fi
}

# Call mod_init_vars, ${MOD_NAME}_init_vars, mod_init_draw if exists
# Set draw_fn depending on CFG_BACKEND
# call mod_loop
mod_run() {
    if declare -f "mod_init_vars" > /dev/null; then
        "mod_init_vars"
    fi

    if declare -f "${MOD_NAME}_init_vars" > /dev/null; then
        "${MOD_NAME}_init_vars"
    fi

    if declare -f "mod_init_draw" > /dev/null; then
        "mod_init_draw"
    fi

    if declare -f "${MOD_NAME}_draw_${CFG_BACKEND}" > /dev/null; then
        draw_fn="${MOD_NAME}_draw_${CFG_BACKEND}"
    elif declare -f "${MOD_NAME}_draw" > /dev/null; then
        draw_fn="${MOD_NAME}_draw"
    elif declare -f "mod_draw_${CFG_BACKEND}" > /dev/null; then
        draw_fn="mod_draw_${CFG_BACKEND}"
    elif declare -f "mod_draw_default" > /dev/null; then
        draw_fn="mod_draw_default"
    else
        echo "CFG_BACKEND=${CFG_BACKEND}, but no draw function: ${MOD_NAME}_draw_${CFG_BACKEND}, ${MOD_NAME}_draw
(or mod_draw_${CFG_BACKEND}, mod_draw_default in this module)
Exiting" >&2
        exit 1
    fi

    if declare -f "mod_loop" > /dev/null; then
        "mod_loop"
    else
        echo "function mod_loop() is not declared" >&2
    fi
}

mod_draw() {
    "$draw_fn" "$@"
}

# https://blog.dhampir.no/content/sleeping-without-a-subprocess-in-bash-and-how-to-sleep-forever
read_sleep() {
    local IFS
    [[ -n "${_snore_fd:-}" ]] || exec {_snore_fd}<> <(:)
    read ${1:+-t "$1"} -u $_snore_fd || :
}

build_sed_replace_command() {
    local sed_command=""
    for key in "${!CFG_REPLACE_MAP[@]}"; do
        local value="${CFG_REPLACE_MAP[$key]}"
        sed_command+="s/$key/$value/g;"
    done

    echo "$sed_command"
}

is_array() {
    local var_name=$1
    local var_decl
    var_decl=$(eval "declare -p $var_name" 2>/dev/null)
    [[ $var_decl =~ "declare -a" ]]
}

apply_dictionary_value_format() {
    local -n target_kv_ref="$1"
    local -n source_kv_ref="$2"
    local -n format_kv_ref="$3"

    for key in "${!source_kv_ref[@]}"; do
        local value="${source_kv_ref[$key]}"
        local fmt="${format_kv_ref[$key]}"
        if [ -n "$fmt" ]; then
            printf -v target_kv_ref["$key"] "$fmt" "$value"
        else
            target_kv_ref["$key"]="$value"
        fi
    done
}

update_threshold() {
    local -n result_kv_ref="$1"
    local -n data_kv_ref="$2"
    local -n threshold_kv_ref="$3"

    for key in "${!threshold_kv_ref[@]}"; do
        local threshold="${threshold_kv_ref[$key]}"
        local value="${data_kv_ref[$key]}"
        if [[ -n "$threshold" && "$value" =~ ^-?[0-9]+$ && "$value" -gt "$threshold" ]]; then
            result_kv_ref["$key"]="ON"
        else
            result_kv_ref["$key"]="OFF"
        fi
    done
}

# Function to extract the value of a given parameter
extract_param_value() {
    local ref_var="$1"
    shift
    local param_name="$1"
    shift
    local params=("$@")
    local param_value=""

    for (( i=0; i<${#params[@]}; i++ )); do
        if [[ "${params[i]}" == "$param_name" ]]; then
            # Assuming the next item is the value
            param_value="${params[i+1]}"
            break
        fi
    done
    eval "$ref_var=\"$param_value\""
}

# Function to create a logarithmic scale
# create_log_scale result_ref min max points
function create_log_scale() {
    local -n scale_points_ref="$1"
    local min_value=$2
    local max_value=$3
    local points=$4

    local min_log=$(echo "l($min_value)/l(10)" | bc -l)
    local max_log=$(echo "l($max_value)/l(10)" | bc -l)

    for ((i=0; i<points; i++)); do
        local scale_value=$(echo "e(($min_log + $i * ($max_log - $min_log) / ($points - 1)) * l(10))" | bc -l)
        printf -v scale_points_ref[$i] "%.0f" "$scale_value"
    done
}

# Function to determine the scale point
# find_scale_point result_ref scale_points_ref value
function find_scale_point() {
    local -n res_ref="$1"
    local -n scale_points_ref="$2"
    local value="$3"

    for ((i=0; i<${#scale_points_ref[@]}; i++)); do
        if (( value < scale_points_ref[$i] )); then
            res_ref="$i"
            return
        fi
    done
    res_ref=$((${#scale_points_ref[@]}))
}

ceil_division() {
    local -n result_ref="$1"
    local numerator=$2
    local denominator=$3
    result_ref=$((numerator / denominator))
    if ((numerator % denominator != 0)); then
        result_ref=$((result_ref + 1))
    fi
}

#######################################################
# Dzen2 utils
#######################################################

dzen2_draw_stacked_bar() {
    local ref_var="$1"
    shift
    # Default values
    local width=100
    local height=4
    local max_value=100
    local values=()
    local fg_colors=("${CFG_DEFAULT_STACK_COLORS[@]}")
    local padding=1
    local bg="#CCCCCC"
    local draw_outline=""

    # Parse named arguments
    while [ $# -gt 0 ]; do
        case "$1" in
            -width)
                width="$2"
                shift 2
                ;;
            -height)
                height="$2"
                shift 2
                ;;
            -max_value)
                max_value="$2"
                shift 2
                ;;
            -values)
                IFS=',' read -r -a values <<< "$2"
                shift 2
                ;;
            -fg_colors)
                IFS=',' read -r -a fg_colors <<< "$2"
                shift 2
                ;;
            -padding)
                padding="$2"
                shift 2
                ;;
            -bg)
                bg="$2"
                shift 2
                ;;
            -draw_outline)
                draw_outline="yes"
                shift 1
                ;;
            *)
                echo "dzen2_draw_stacked_bar(): Unknown option: $1" 1>&2
                return 1
                ;;
        esac
    done

    local num_values=${#values[@]}
    local total_padding=$((padding * (num_values - 1)))
    local available_width=$((width - total_padding))

    local res="^ib(1)"

    local rendered_width=0
    if [[ -n "$draw_outline" ]]; then
        available_width=$((available_width - 1))
        rendered_width=$((rendered_width + 1))
        res="${res}^p(1,0)" # 1px left padding
    else
        res="${res}^fg($bg)^r(${width}x${height})^p(-${width},0)"
    fi

    for ((i = 0; i < num_values; i++)); do
        local value=${values[i]}
        local fg_color=${fg_colors[i]}
        local bar_width=$((value * available_width / max_value))

        if ((bar_width > 0)); then
            res="${res}^fg(${fg_color})^r(${bar_width}x${height}})^p(${padding},0)"
            rendered_width=$((rendered_width + bar_width + padding))
        fi
    done

    if [[ -n "$draw_outline" ]]; then
        rendered_width=$((rendered_width))
        # set X pos back of rendered width and render outline rect on top
        res="${res}^p(-${rendered_width},0)^fg($bg)^ro(${width}x${height})"
    else
        offset=$((available_width - rendered_width + 1))
        if ((offset > 0)); then
            res="${res}^fg($bg)^p($((offset > 0 ? offset : 0))x8)"
        fi
    fi

    eval "$ref_var=\"${res}^ib()\""
}

dzen2_draw_h_stacked_bars() {
    local ref_var="$1"
    shift
    # Default values
    local bar_width=4
    local height=$((CFG_HEIGHT - 2))
    local bottom_margin=1
    local max_value=100
    local stacks=1
    local values=()
    local fg_colors=("${CFG_DEFAULT_STACK_COLORS[@]}")
    local bar_padding=1
    local stack_padding=1
    local bg="#333"
    local border_fg="#777"

    # Parse named arguments
    while [ $# -gt 0 ]; do
        case "$1" in
            -bar_width)
                bar_width="$2"
                shift 2
                ;;
            -height)
                height="$2"
                shift 2
                ;;
            -bottom_margin)
                bottom_margin="$2"
                shift 2
                ;;
            -max_value)
                max_value="$2"
                shift 2
                ;;
            -stacks)
                stacks="$2"
                shift 2
                ;;
            -values)
                IFS=',' read -r -a values <<< "$2"
                shift 2
                ;;
            -fg_colors)
                IFS=',' read -r -a fg_colors <<< "$2"
                shift 2
                ;;
            -bar_padding)
                bar_padding="$2"
                shift 2
                ;;
            -stack_padding)
                stack_padding="$2"
                shift 2
                ;;
            -bg)
                bg="$2"
                shift 2
                ;;
            -border_fg)
                border_fg="$2"
                shift 2
                ;;
            *)
                echo "dzen2_draw_h_stacked_bars(): Unknown option: $1" 1>&2
                return 1
                ;;
        esac
    done

    local num_values=${#values[@]}
    local num_bars=$((num_values / stacks))
    local total_h_padding=$((bar_padding * (num_bars - 1)))

    local widget_width=$((num_bars * bar_width + total_h_padding + 2)) # 2 - borders
    local res="^p(_BOTTOM)^p(-3)^ib(1)^fg(${bg})^r(${widget_width}x${height}+0-$((height + bottom_margin)))" # bg rect
    res="${res}^fg(${border_fg})^ro(${widget_width}x${height}-${widget_width}+0)^p(-${widget_width})" # border

    # Iterate values. Step is count of stacks per bar
    local skip_x=0 # for reducing not needed commands, optimization
    for ((i = 0; i < num_values; i+=stacks)); do
        local next_bar_x_offset=$((i == 0 ? 1 : bar_padding)) # for first var - border width
        local non_zero_stacks=0
        for ((s = 0; s < stacks; s++)); do
            local total_v_padding=$((stack_padding * (stacks - 1)))
            local value=${values[$((i + s))]}
            local available_height=$((height - 2 - total_v_padding))
            local stack_height=$((value * available_height / max_value))
            if ((stack_height > 0)); then
                non_zero_stacks=$((non_zero_stacks + 1))
            fi
        done
        local total_v_padding=$((stack_padding * ((non_zero_stacks > 0 ? non_zero_stacks : 1) - 1)))

        # Optimization: If nothing to render then collect position offset and apply position offset on next/last render
        if ((non_zero_stacks > 0)); then
            if ((skip_x>0)); then
                res+="^p($skip_x)";
            fi
        else
            skip_x=$(( skip_x + next_bar_x_offset + bar_width))
            continue
        fi
        skip_x=0

        for ((s = 0; s < stacks; s++)); do
            local value=${values[$((i + s))]}
            local fg_color=${fg_colors[s]} # bar color
            local available_height=$((height - 2 - total_v_padding))
            local stack_height=$((value * available_height / max_value))

            if ((s == 0)); then
                # For first bar, use 1px (border)
                local y_offset=$((stack_height + bottom_margin + 1))
                res="${res}^p(_BOTTOM)^p(-3)^fg(${fg_color})^r(${bar_width}x${stack_height}+${next_bar_x_offset}-${y_offset})"
            else
                res="${res}^fg(${fg_color})^r(${bar_width}x${stack_height}-${bar_width}-$((stack_height + stack_padding )))"
            fi

            if ((stack_height == 0)); then
                res="${res}^p(0;+${stack_padding})"
            fi
        done
    done
    res+="^p($((skip_x + 4)))" # 1px - border, 3ox - margin
    res+="^ib()^p()"
    eval "$ref_var=\"$res\""
}

# 2 values, render stacked 2 bars low and high, Y-centered
# Example:
# local a=(0 1 2 3 4 5 6 7 8 9 10 10 9 8 7 6 5 4 3 2 1 0)
# local b=(10 9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9 10)
# local output
# dzen2_draw_centered_bars output \
#   a \
#   b \
#   -height 26 \
#   -stack_padding 2\
#   -max_value 10
dzen2_draw_centered_bars() {
    local -n ref_var="$1"
    shift
    local -n ref_values_hi="$1"
    shift
    local -n ref_values_low="$1"
    shift
    # Default values
    local bar_width=2
    local height=$((CFG_HEIGHT - 2))
    local max_value=100
    local fg_colors=("${CFG_DEFAULT_STACK_COLORS[@]}")
    local bar_padding=1
    local stack_padding=1
    local bg="#333"
    local border_fg="#777"

    # Parse named arguments
    while [ $# -gt 0 ]; do
        case "$1" in
            -bar_width)
                bar_width="$2"
                shift 2
                ;;
            -height)
                height="$2"
                shift 2
                ;;
            -max_value)
                max_value="$2"
                shift 2
                ;;
            -fg_colors)
                IFS=',' read -r -a fg_colors <<< "$2"
                shift 2
                ;;
            -bar_padding)
                bar_padding="$2"
                shift 2
                ;;
            -stack_padding)
                stack_padding="$2"
                shift 2
                ;;
            -bg)
                bg="$2"
                shift 2
                ;;
            -border_fg)
                border_fg="$2"
                shift 2
                ;;
            *)
                echo "dzen2_draw_centered_bars(): Unknown option: $1" 1>&2
                return 1
                ;;
        esac
    done

    local num_values=${#ref_values_hi[@]}
    local widget_width=$((num_values * (bar_width + bar_padding) + 2 - bar_padding)) # 2 - borders

    local res="^ib(1)^fg(${bg})^r(${widget_width}x${height})" # bg rect
    res+="^fg(${border_fg})^ro(${widget_width}x${height}-$widget_width)^p(-$((widget_width)))" # border

    local low_color="${fg_colors[0]}"
    local hi_color="${fg_colors[1]}"
    local available_height=$(((height - 2) / 2))

    local stack_padding_offset
    ceil_division stack_padding_offset "$stack_padding" 2

    local skip_x=0 # for reducing not needed commands, optimization
    local shoud_reset_y=0 # for reducing not needed commands, optimization
    for ((i = 0; i < num_values; i++)); do
        local next_bar_x_offset=$((i == 0 ? 1 : bar_padding)) # for first var - border width
        local low="$((ref_values_low[i] * (available_height - stack_padding_offset) / max_value ))"
        local hi="$((ref_values_hi[i] * (available_height - stack_padding_offset) / max_value ))"
        if ((low > 0)); then
            if ((shoud_reset_y>0)); then res+="^p()"; fi
            if ((skip_x>0));        then res+="^p($skip_x)"; fi

            local y_offset # Use ceil for low/2 value and floor for hi/2 value
            ceil_division y_offset $low 2
            res+="^fg($low_color)^r(${bar_width}x${low}+${next_bar_x_offset}+$((stack_padding_offset + y_offset)))"

            shoud_reset_y=0
            skip_x=0
        else
            skip_x=$((skip_x + bar_width + next_bar_x_offset))
        fi
        if ((hi > 0)); then
            if ((shoud_reset_y>0)); then res+="^p()"; fi
            if ((skip_x>0));        then res+="^p($skip_x)"; fi

            res+="^fg($hi_color)^r(${bar_width}x${hi}-${bar_width}-$(((stack_padding / 2) + (hi / 2))))"

            shoud_reset_y=1
            skip_x=0
        else
            shoud_reset_y=1
        fi
    done
    res+="^p($((skip_x + 4)))" # 1px - border, 3px - margin
    res+="^ib()^p()"
    ref_var="$res"
}

dzen2_draw_flags() {
    local ref_var="$1"
    shift
    local label=""      # no label
    local label_size=45 # size of label
    local label_highlight=0
    local color_on="#afa"
    local color_all_off="#777"
    local color_bg="#000"
    local color_fg="#fff"
    local name_size=50
    local y_padding=2
    local fn_main="" # will be rendered as ^fn()
    local fn_2rows="Terminus-8"
    local fn_2rows_y_offset=0
    local flag_align="_CENTER"
    local flag_x_padding=1

    # mandatory params
    local -n dictionary_short_names_ref=$1
    shift
    local -n dictionary_ref=$1
    shift
    local -n keys_to_render_ref=$1
    shift

    # override params
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -label) label="$2"; shift 2;;
            -label_size) label_size="$2"; shift 2;;
            -label_highlight) label_highlight="$2"; shift 2;;
            -color_on) color_on="$2"; shift 2;;
            -color_all_off) color_all_off="$2"; shift 2;;
            -color_bg) color_bg="$2"; shift 2;;
            -color_fg) color_fg="$2"; shift 2;;
            -name_size) name_size="$2"; shift 2;;
            -y_padding) y_padding="$2"; shift 2;;
            -fn_main) fn_main="$2"; shift 2;;
            -fn_2rows) fn_2rows="$2"; shift 2;;
            -fn_2rows_y_offset) fn_2rows_y_offset="$2"; shift 2;;
            -flag_align) flag_align="$2"; shift 2;;
            -flag_x_padding) flag_x_padding="$2"; shift 2;;
            *) echo "dzen2_draw_flags(): Unknown parameter: $1"; exit 1;;
        esac
    done

    local res="^ib(1)"
    local height=$((CFG_HEIGHT - 2 * y_padding))

    local has_on_value=0
    for key in "${keys_to_render_ref[@]}"; do
        if [[ "${dictionary_ref[$key]}" == "ON" ]]; then
            has_on_value=1
            break
        fi
    done

    # draw label if exist
    local setup_label_area=""
    local set_border_color="" # if at least one flag is ON, then set "ON" color as primary color
    if ((has_on_value == 1)); then
        if ((label_highlight == 1)); then
            setup_label_area="^p()^fg(${color_on})^r(${label_size}x${height})^fg(${color_bg})"
        else
            setup_label_area="^p()^fg(${color_on})^ro(${label_size}x${height}})"
        fi
        set_border_color="^fg(${color_on})"
    else
        if [[  -n "$label" ]]; then
            setup_label_area="^p()^fg(${color_all_off})^ro(${label_size}x${height})"
        fi
        set_border_color="^fg(${color_all_off})"
    fi
    if [[  -n "$label" ]]; then
        # centered label
        res+="${setup_label_area}^p(-${label_size})^ba(${label_size},_CENTER)${label}"
    fi

    # set 2 rows font
    res+="^fn($fn_2rows)"

    local index=0
    # draw flag state
    for key in "${keys_to_render_ref[@]}"; do
        local flag_name="${dictionary_short_names_ref[$key]}"
        if [[ -z "$flag_name" ]]; then
            flag_name="$key"
        fi

        local label_cmd="^p(-$((name_size - flag_x_padding));${fn_2rows_y_offset})^ba($((name_size - flag_x_padding)),${flag_align})${flag_name}"
        if (((index % 2) == 0)); then
            # draw in top
            res+="${set_border_color}^p(_TOP)^p(-3;${y_padding})"
            if [[ "${dictionary_ref[$key]}" == "ON" ]]; then
                res+="^r(${name_size}x$((height / 2 + 1)))^fg(${color_bg})$label_cmd"
            else
                res+="^ro(${name_size}x$((height / 2  +1)))$label_cmd"
            fi
        else
            # draw in bottom
            res+="${set_border_color}^p(_TOP)^p(-$((name_size + 2));${y_padding})"
            if [[ "${dictionary_ref[$key]}" == "ON" ]]; then
                res+="^r(${name_size}x$((height / 2))-0+$((height / 2)))^fg(${color_bg})$label_cmd"
            else
                res+="^ro(${name_size}x$((height / 2 ))-0+$((height / 2)))$label_cmd"
            fi
        fi
        index=$((index+1)) # 1px - border
    done

    # reset state
    res+="^ib()^p()^p(3)^fg(${color_fg})^bg(${color_bg})^fn($fn_main)" # 3px - margin
    eval "$ref_var=\"$res\""
}
