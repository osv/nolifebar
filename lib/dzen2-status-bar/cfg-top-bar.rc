#!/usr/bin/env bash

# Each variable can have next prefixes:
# CFG_ - used in main scripts
# MOD_ - used by modules

# Modules that will be loaded by main script
# Each module will evaluate this file
#
# Exported variables from main script:
#   $RESOURCE_FILE - Path to this file. Usually module must evaluate this, e.g: [ -f "$RESOURCE_FILE" ] && source "$RESOURCE_FILE"
#   $TMP_DIR - path to temp directory. Module must create temp files in this directory
#
CFG_MODULES=("mem" "time" "network" "cpu_bars")

# # Uncomment to output data for dzen2 to STDOUT for debugging
# DEBUG=true

# Replace text before sending to status bar
declare -A CFG_REPLACE_MAP=(
    ["<FG>"]="#fff"
    ["<BG>"]="#000"
    ["<FN_MAIN>"]="RobotoMono Nerd Font:size=12"
    ["<FN_SMALL>"]="Terminus-12"
)

# Some functions uses this for draw rects
CFG_HEIGHT=20

# Status bar command, dzen2
CFG_STATUS_BAR_CMD="dzen2 -fn Terminus-10  -ta l -h ${CFG_HEIGHT}"

########### Network
MOD_NETWORK_INTERVAL=1        # Must be decimal

MOD_NETWORK_fn_format() {
  printf "Down: %dKB, Up: %dKB\n" "$1" "$2"
}
MOD_NETWORK_INTERFACE="[ew]*" # e.g wlp7s0

########### Mem
MOD_MEM_INTERVAL=2

MOD_MEM_fn_format() {
  local used_percentage="$1"
  local mem_total="$2"
  local mem_used="$3"
  local mem_free="$4"
  local mem_available="$5"
  local mem_buffers="$6"
  local mem_cached="$7"
  local mem_shared="$8"
  local mem_sreclaimable="$9"
  local mem_swap_total="${10}"
  local mem_used_swap="${11}"
  local mem_swap_cache="${12}"
  local zfs_arc_size="${13}"
  local mem_buf_and_shared=$((mem_buffers + mem_shared))
  local mem_used_without_arc=$((mem_used - zfs_arc_size))

  local bar
  bar=$(dzen2_draw_stacked_bar \
    -width 100 \
    -height 4 \
    -draw_outline \
    -values "${zfs_arc_size},${mem_used_without_arc},${mem_buf_and_shared},${mem_cached}" \
    -fg_colors "#ff8b92,#c3e88d,#e1acff,#ffe585" \
    -bg "#777" \
    -padding 1 \
    -max_value "${mem_total}")

  printf "Mem: %d%%^p(_TOP)^p(-150,-14)%s^p()\n" "$used_percentage" "$bar"
  # printf "%s\n" "$bar_txt"
}

########### CPU Bar
# # Custom params for CPU Cores charts
# # fg_colors for bars: Low(nice),Normal(user),Kernel,Guest
# declare -a MOD_CPU_BARS_CORES_PARAMS=(
#   -bar_width 5 -height 22 -bottom_margin 1
#   -stack_padding 1 -bar_padding 2
#   -bg "#fff" -border_fg "#777"
#   -fg_colors "#7f4b32,#73984d,#817c99,#777545"
# )

# # Custom params for Total CPU Bar
# declare -a MOD_CPU_BARS_TOTAL_PARAMS=(
#   -bar_width 5 -height 22 -bottom_margin 1
#   -stack_padding 1 -bar_padding 2
#   -bg "#fff" -border_fg "#777"
#   -fg_colors "#7f4b32,#73984d,#817c99,#777545"
# )

MOD_CPU_BARS_INTERVAL=1 # Interval, float

# # Example of format function
# MOD_CPU_BARS_fn_format() {
#     local total_stats_dzen="$1"
#     local cores_stats_dzen="$2"
#     local total_cpu_perc="$3"

#     printf "CPU %s\n" "$cores_stats_dzen"
# }


####################################
# Widget layout format function
####################################

state=""
fn_format_template() {
  state="$1"
  if [ "$state" = 'one' ]; then
      printf "{out_mem}\n"
  else
      printf "{out_network} ^ca(1, echo one) time: {out_time}^ca() mem {out_mem} {out_cpu_bars} \n"
  fi

}
