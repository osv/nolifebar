#!/usr/bin/env bash

# Note: dzen max len is 8k, you cannot use big count of bars
# #define MAX_LINE_LEN   8192

# Each variable can have next prefixes:
# CFG_ - configs by main scripts and modules
# MOD_ - used by modules

# Modules that will be loaded by main script
# Each module will evaluate this file
#
# Exported variables from main script:
#   $RESOURCE_FILE - Path to this file. Usually module must evaluate this, e.g: [ -f "$RESOURCE_FILE" ] && source "$RESOURCE_FILE"
#   $TMP_DIR - path to temp directory. Module must create temp files in this directory
#   $MOD_NAME - upper case of current module, usuful if you want to have shared code between modules and eval
#   $MODULE_CORE_DIR - dir to library of this project (shared bash code, modules)
CFG_MODULES=("mem" "time" "network" "cpu_bars" "cava_out" "cava_in" "openvpn" "nvidia")

# # Uncomment to output data for dzen2 to STDOUT for debugging
# DEBUG=true

# Replace text before sending to status bar:
declare -A CFG_REPLACE_MAP=(
    # ["<FG>"]="#fff"
    # ["<BG>"]="#000"
    # ["<ON>"]="#afa"
    # ["<OFF>"]="#777"
    # ["<FN_MAIN>"]="RobotoMono Nerd Font:size=12"
    # ["<FN_MEDIUM>"]="RobotoMono Nerd Font:size=10"
    # ["<FN_2_ROWS>"]="Terminus-8"
    # ["<FN_SANS_MAIN>"]="RobotoMono Nerd Font:size=12"

    # ["<BAR1>"]="#ff8b92"
    # ["<BAR2>"]="#c3e88d"
    # ["<BAR3>"]="#e1acff"
    # ["<BAR4>"]="#ffe585"

    ["<FG>"]="#33e"
    ["<BG>"]="#e7e7e7"
    ["<BORDER>"]="#333"
    ["<WIDGET_BG>"]="#ddd"

    ["<ON>"]="#b82"
    ["<OFF>"]="#777"

    # ["<FN_MAIN>"]="RobotoMono Nerd Font:size=12:style=Light"
    # ["<FN_MEDIUM>"]="RobotoMono Nerd Font:size=10:style=Light"
    # ["<FN_2_ROWS>"]="Terminus-8"
    # ["<FN_SANS_MAIN>"]="RobotoMono Nerd Font:size=12:style=Light"
    ["<FN_MAIN>"]="Terminus:size=14:style=Light"
    ["<FN_MEDIUM>"]="Terminus:size=10:style=Light"
    ["<FN_2_ROWS>"]="Terminus-8"
    ["<fn_2_ROWS>"]="RobotoMono Nerd Font:size=7:style=Light"

    # ["<BAR1>"]="#ff8b92"
    # ["<BAR2>"]="#c3e88d"
    # ["<BAR3>"]="#e1acff"
    # ["<BAR4>"]="#ffe585"

    ["<BAR1>"]="#a33"
    ["<BAR2>"]="#4b3"
    ["<BAR3>"]="#80b"
    ["<BAR4>"]="#66b"
)

# Some functions uses this for draw rects
CFG_HEIGHT=30

# Status bar command, dzen2
CFG_STATUS_BAR_CMD=(dzen2 -dock -fn "${CFG_REPLACE_MAP['<FN_MAIN>']}"
                    -bg "${CFG_REPLACE_MAP['<BG>']}"
                    -fg "${CFG_REPLACE_MAP['<FG>']}"
                    -ta r -h "${CFG_HEIGHT}")

# Default params for stack bar
CFG_DEFAULT_STACK_BAR_PARAMS=(
  -bg '<WIDGET_BG>'
  -bottom_margin 2
  -height "$((CFG_HEIGHT - 4))"
)

# # Default colors for stack bars. Some modules might have other var to override colors
CFG_DEFAULT_STACK_COLORS=("<BAR1>" "<BAR2>" "<BAR3>" "<BAR4>")

CFG_DEFAULT_DRAW_FLAG_PARAMS=(
  -label_size 45 # size of label
  -label_highlight 0
  -color_on "<ON>"
  -color_all_off "<OFF>"
  -color_bg "<BG>"
  -color_fg "<FG>"
  -name_size 50
  -y_padding 2
  -fn_main "<FN_MAIN>"
  -fn_2rows "<FN_2_ROWS>"
  -fn_2rows_y_offset 0
  -flag_align "_CENTER"
  -flag_x_padding 0
)

# ################################ Network
# MOD_NETWORK_INTERVAL=1        # Must be decimal

MOD_NETWORK_fn_format() {
  printf "Down: %4dKB, Up: %4dKB\n" "$1" "$2"
}
# MOD_NETWORK_INTERFACE="[ew]*" # e.g wlp7s0

# ############################### Mem
# MOD_MEM_INTERVAL=2

# Draw mem and bar
# MOD_MEM_fn_format() {
#   local used_percentage="$1"
#   local mem_total="$2"
#   local mem_used="$3"
#   local mem_free="$4"
#   local mem_available="$5"
#   local mem_buffers="$6"
#   local mem_cached="$7"
#   local mem_shared="$8"
#   local mem_sreclaimable="$9"
#   local mem_swap_total="${10}"
#   local mem_used_swap="${11}"
#   local mem_swap_cache="${12}"
#   local zfs_arc_size="${13}"
#   local mem_buf_and_shared=$((mem_buffers + mem_shared))
#   local mem_used_without_arc=$((mem_used - zfs_arc_size))

#   local mem_txt_size=92
#   local bar
#   bar=$(dzen2_draw_stacked_bar \
#     -width "$mem_txt_size" \
#     -height 7 \
#     -draw_outline \
#     -values "${zfs_arc_size},${mem_used_without_arc},${mem_buf_and_shared},${mem_cached}" \
#     -fg_colors "<BAR1>,<BAR2>,<BAR3>,<BAR4>" \
#     -bg "<BORDER>" \
#     -padding 1 \
#     -max_value "${mem_total}")
#   printf "^p(_TOP)^fg(<FG>)^fn(<FN_MEDIUM>)^ba(${mem_txt_size},_CENTER)Mem %3s%%^p(-$((mem_txt_size));20)%s^fn(<MAIN>)\n" "$used_percentage" "$bar"
# }

# draw mem and swap bars
MOD_MEM_fn_format() {
  local used_percentage="$1"
  local mem_total="$2"
  local mem_used="$3"
  local mem_free="$4"
  local mem_available="$5"
  local mem_buffers="$6"
  local mem_cached="$7"
  local mem_shared="$8"
  local mem_sreclaimable="$9"
  local mem_swap_total="${10}"
  local mem_used_swap="${11}"
  local mem_swap_cache="${12}"
  local zfs_arc_size="${13}"
  local mem_buf_and_shared=$((mem_buffers + mem_shared))
  local mem_used_without_arc=$((mem_used - zfs_arc_size))

  local bar_size=104
  local mem_bar
  mem_bar=$(dzen2_draw_stacked_bar \
    -width "$bar_size" \
    -height 7 \
    -draw_outline \
    -values "${zfs_arc_size},${mem_used_without_arc},${mem_buf_and_shared},${mem_cached}" \
    -fg_colors "<BAR1>,<BAR2>,<BAR3>,<BAR4>" \
    -bg "<BORDER>" \
    -padding 1 \
    -max_value "${mem_total}")

  swap_bar=$(dzen2_draw_stacked_bar \
    -width "$bar_size" \
    -height 7 \
    -draw_outline \
    -values "${mem_used_swap}" \
    -fg_colors "<BAR1>,<BAR2>,<BAR3>,<BAR4>" \
    -bg "<BORDER>" \
    -padding 1 \
    -max_value $((mem_swap_total == 0 ? 100 : mem_swap_total)))

  local swap_percentage="--"
  if ((mem_swap_total > 0)); then
    swap_percentage=$((100 * $mem_used_swap / $mem_swap_total))
  fi

  local out=$(printf "^p(_TOP)^p(;2)^fg(<FG>)^fn(<FN_2_ROWS>)^ba(70,_LEFT)Mem  %3d%%" "$used_percentage")
  out+="^ib(1)^fg(<BORDER>)^r(1x7-12+1)^r(10x1-0+2)^p(2;-3)${mem_bar}^ib(1)"
  out+="^p(-175;14)^fg(<FG>)^ba(70,_LEFT)"
  out+=$(printf "Swap %3s%%" "$swap_percentage")
  out+="^fg(<BORDER>)^r(1x7-12+4)^r(10x1-0+4)^p(2;-3)${swap_bar}"
  printf "%s^p()^ib()^fn(<FN_MAIN>)\n" "$out"
  # printf "^p(_TOP)^fg(<FG>)^fn(<FN_MEDIUM>)Mem %3s%%^ib(1)^r(1x12+2+4)^r(10x1-0+3)^p(2;-2)^ib()%s^fn(<MAIN>)\n" "$used_percentage" "$bar"
}

# ############################## CPU Bar
# # Custom params for CPU Cores charts
# # fg_colors for bars: Low(nice),Normal(user),Kernel,Guest
# declare -a MOD_CPU_BARS_CORES_PARAMS=(
#   -bar_width 5 -height 22 -bottom_margin 1
#   -stack_padding 1 -bar_padding 2
#   -bg "#fff" -border_fg "#777"
#   -fg_colors "#7f4b32,#73984d,#817c99,#777545"
# )

# # Custom params for Total CPU Bar
# declare -a MOD_CPU_BARS_TOTAL_PARAMS=(
#   -bar_width 5 -height 22 -bottom_margin 1
#   -stack_padding 1 -bar_padding 2
#   -bg "#fff" -border_fg "#777"
#   -fg_colors "#7f4b32,#73984d,#817c99,#777545"
# )
# declare -a MOD_CPU_BARS_CORES_PARAMS=(
#   -bottom_margin 7
#   -height $((CFG_HEIGHT - 8))
# )

# MOD_CPU_BARS_INTERVAL=1 # Interval, float

# # Example of format function
# MOD_CPU_BARS_fn_format() {
#     local total_stats_dzen="$1"
#     local cores_stats_dzen="$2"
#     local total_cpu_perc="$3"

#     printf "CPU %s\n" "$cores_stats_dzen"
# }

# ############################### Cava OUT (bars)
MOD_CAVA_OUT_FRAMERATE=30 # FPS of cava output, default 15
MOD_CAVA_OUT_BARS=120      # count of cava bars, default 30
# MOD_CAVA_OUT_HEIGHT=10    # default: $CFG_HEIGHT

# # Custom create cava config
# MOD_CAVA_OUT_fn_create_config() {
#   local config="$1"
#   cat << EOF > "$config"
# [general]
# bars = $sc_bars
# sleep_timer = 1
# framerate = $sc_framerate
# [output]
# method = raw
# raw_target = /dev/stdout
# data_format = ascii
# ascii_max_range = $sc_range
# channels = mono
# mono_option = average
# [smoothing]
# noise_reduction = 20
# EOF
# }

# # Additional params to dzen2_draw_h_stacked_bars
declare -a MOD_CAVA_OUT_BAR_PARAMS=(
  -bar_width 1
  -bar_padding 1
  -fg_colors "#66d"
)

# ############################### Cava Input (microphone)
# # Same like for MOD_CAVA_OUT
#
# MOD_CAVA_IN_SENSITIVITY=400 # default
# MOD_CAVA_IN_FRAMERATE=40    # FPS of cava output, default 15
# MOD_CAVA_IN_BARS=30         # count of cava bars, default 30
# MOD_CAVA_IN_HEIGHT=10       # default: $CFG_HEIGHT

# # Custom create cava config
# # You might want to override source and method
# # By default used pulse
#  MOD_CAVA_IN_fn_create_config() {
#     local config="$1"
#     default_source=$(pactl info | \
#                      grep "Default Source" | \
#                      cut -d ' ' -f3)
#     cat << EOF > "$config"
# [general]
# bars = $sc_bars
# sleep_timer = 1
# framerate = $sc_framerate
# autosens = 0
# sensitivity = $sc_sensitivity
# [output]
# method = raw
# raw_target = /dev/stdout
# data_format = ascii
# ascii_max_range = $sc_range
# mono_option = average
# channels = mono
# mono_option = average
# [input]
# method = pulse
# source = "$default_source"
# [smoothing]
# noise_reduction = 20
# EOF
# }

# # Additional params to dzen2_draw_h_stacked_bars
# declare -a MOD_CAVA_IN_BAR_PARAMS=(
#   -bar_width 1
#   -bar_padding 0
#   -fg_colors "#fff"
# )

# ############################### OpenVPN
# MOD_OPENVPN_SERVICE_PREFIX="openvpn-" # systemd service prefix

# List of openvpn services, but without prefix and without ".service"
# E.g if service called openvpn-foo.service then use "foo" in list
MOD_OPENVPN_SERVICES=(kz-production kz-development)

# # Override params (see dzen2_draw_flags)
# MOD_OPENVPN_RENDER_PARAMS=(-label "OpenVPN" -label_size "100" -color_on red -y_padding 2 -fn_2rows "terminus-8" -fn_2rows_y_offset 0)

# Show short service name
declare -A MOD_OPENVPN_SERVICES_NAME_MAP=(
    ["kz-production"]="Prod"
    ["kz-development"]="Dev"
)

# # draw VPN function, see global dictionary: "services_status", global array: "services"
# # First arg - fifo file for output
# # Second arg - last line from log
# MOD_OPENVPN_fn_draw() {
#   local fifo="$1"
#   local last_line="$2" # not used for now
#   dzen2_draw_flags services_status services MOD_OPENVPN_SERVICES_NAME_MAP -label "VPN" > "$fifo"
# }

# ############################### NVIDIA
# MOD_NVIDIA_INTERVAL=1 # Update interval
# MOD_NVIDIA_GPU_INDEX=0 # GPU device index

# # Additional render params, see dzen2_draw_flags
# MOD_NVIDIA_RENDER_PARAMS=()

# # Params for show
# MOD_NVIDIA_VISIBLE_PARAMS=('fan.speed' 'temperature.gpu' 'power.draw' 'utilization.gpu' 'clocks.current.memory' 'clocks.current.graphics' 'utilization.decoder' 'utilization.encoder')

# # Override alert tashold
# declare -A MOD_NVIDIA_TRESHOLD=(
#   ["fan.speed"]=80
#   ["power.draw"]=50
#   ["utilization.gpu"]=30
#   ["temperature.gpu"]=70
#   ["utilization.decoder"]=1
#   ["utilization.encoder"]=1
#   ["clocks.current.graphics"]=400
#   ["clocks.current.memory"]=600
# )

# Override render function
# Arguments: name fan_speed power_draw memory_total memory_free memory_used gpu_utilization temperature
MOD_NVIDIA_fn_draw() {
  memory_total="$4"
  memory_used="$6"

  local mem_bar
  mem_bar=$(dzen2_draw_stacked_bar \
    -width 104 \
    -height 7 \
    -draw_outline \
    -values "$memory_used" \
    -fg_colors "<BAR1>,<BAR2>,<BAR3>,<BAR4>" \
    -bg "<BORDER>" \
    -padding 1 \
    -max_value "${memory_total}")

  local widget=$(default_draw)
  local out="^p(-104)${mem_bar}^p(2)^r(10x1)^r(1x20)^p(4)${widget}"
  printf "%s\n" "$out"
}

###############################
# Widget layout format function
###############################

state=""
fn_format_template() {
  state="$1"
  if [ "$state" = 'one' ]; then
      printf "{out_mem}\n"
  else
      printf "{out_network} {out_cpu_bars} {out_mem}{out_nvidia} {out_openvpn} | {out_cava_out} | ^fg(<FG>) {out_cava_in} ^fg(<FG>){out_time} \n"
  fi

}
