#!/usr/bin/env bash

echo "Executing Nvidia GPU Stats Plugin"

[ -f "$RESOURCE_FILE" ] && source "$RESOURCE_FILE"
: "${MODULE_CORE_DIR:=$(dirname $0)}"
. "$MODULE_CORE_DIR/functions"
: "${TMP_DIR:=/tmp}"

check_dependencies nvidia-smi

declare -A gpu_stat_alert_treshold
declare -A gpu_stat_fmt

mod_init_vars() {
    interval=1
    gpu_index=0

    additional_render_params=()

    gpu_stat_alert_treshold=(
        ["fan.speed"]=80
        ["power.draw"]=50
        ["utilization.gpu"]=30
        ["temperature.gpu"]=70
        ["utilization.decoder"]=1
        ["utilization.encoder"]=1
        ["clocks.current.graphics"]=400
        ["clocks.current.memory"]=600
    )

    visible_params=(
                    'memory.free' 'memory.used'
                    'fan.speed' 'temperature.gpu'
                    'power.draw' 'utilization.gpu'
                    'clocks.current.memory' 'clocks.current.graphics'
                    'utilization.decoder' 'utilization.encoder'
                   )

    # define how to format metrics
    gpu_stat_fmt=(
        ["name"]="%s"
        ["fan.speed"]="Fan %3i%%"
        ["power.draw"]="Pwr%4iW"
        ["memory.total"]="Ttl %4iM"
        ["memory.free"]="Fre %4iM"
        ["memory.used"]="Use %4iM"
        ["utilization.gpu"]="GPU %3i%%"
        ["temperature.gpu"]="t  %4iÂ°C"
        ["utilization.decoder"]="Dec %3i%%"
        ["utilization.encoder"]="Enc %3i%%"
        ["clocks.current.graphics"]="P%5iMHz"
        ["clocks.current.memory"]="M%5iMHz"
    )
}

# dictionary of ON/OFF value if value > treshold in gpu_stat_alert_treshold
declare -A alerts=()
# Formatted metrics
declare -A gpu_stat_short_names=()

format_and_store() {
    local key="$1"
    local value="$2"
    local fmt="${gpu_stat_fmt[$key]}"

    if [ -n "$fmt" ]; then
        gpu_stat_short_names[$key]=$(printf "$fmt" "$value")
    fi
}

update_alerts() {
    local metric="$1"
    local value="$2"
    local threshold=${gpu_stat_alert_treshold[$metric]}

    if ((threshold > 0 && value > threshold)); then
        alerts[$metric]="ON"
    else
        alerts[$metric]="OFF"
    fi
}

# First arg - fifo file for output
mod_draw_dzen2() {
    dzen2_draw_flags \
        gpu_stat_short_names \
        alerts \
        visible_params \
        -label "GPU" \
        "${CFG_DEFAULT_DRAW_FLAG_PARAMS[@]}" \
        -name_size 60 \
        -flag_align _LEFT \
        -flag_x_padding 3 \
        "${additional_render_params[@]}"
}

mod_loop() {
    local fifo="$1"

    # blank state
    mod_draw > "$FIFO_FILE"

    nvidia-smi -l "$interval" \
        --query-gpu=index,name,fan.speed,power.draw,memory.total,memory.free,memory.used,utilization.gpu,temperature.gpu,utilization.decoder,utilization.encoder,clocks.current.graphics,clocks.current.memory \
        --format=csv,noheader,nounits \
        | sed --unbuffered 's/, /,/g' \
        | while IFS=, read -r index name fan_speed power_draw memory_total \
                              memory_free memory_used gpu_utilization temperature \
                              decoder encoder clocks_graphics clocks_memory
    do
        if ((index != gpu_index)); then continue; fi
        power_draw="${power_draw%%.*}" # to integer: 24.15 -> 24

        format_and_store "name" "$name"
        format_and_store "fan.speed" "$fan_speed"
        format_and_store "power.draw" "$power_draw"
        format_and_store "memory.total" "$memory_total"
        format_and_store "memory.free" "$memory_free"
        format_and_store "memory.used" "$memory_used"
        format_and_store "utilization.gpu" "$gpu_utilization"
        format_and_store "temperature.gpu" "$temperature"
        format_and_store "utilization.decoder" "$decoder"
        format_and_store "utilization.encoder" "$encoder"
        format_and_store "clocks.current.graphics" "$clocks_graphics"
        format_and_store "clocks.current.memory" "$clocks_memory"

        update_alerts "fan.speed" "$fan_speed"
        update_alerts "power.draw" "$power_draw"
        update_alerts "memory.total" "$memory_total"
        update_alerts "memory.free" "$memory_free"
        update_alerts "memory.used" "$memory_used"
        update_alerts "utilization.gpu" "$gpu_utilization"
        update_alerts "temperature.gpu" "$temperature"
        update_alerts "utilization.decoder" "$decoder"
        update_alerts "utilization.encoder" "$encoder"
        update_alerts "clocks.current.graphics" "$clocks_graphics"
        update_alerts "clocks.current.memory" "$clocks_memory"

        mod_draw \
            "$name" "$fan_speed" "$power_draw" "$memory_total" \
            "$memory_free" "$memory_used" "$gpu_utilization" "$temperature"\
            "$decoder" "$encoder" "$clocks_graphics" "$clocks_memory" > "$FIFO_FILE"
    done
}

mod_run
